export declare const IncIndent: unique symbol;
export declare const DecIndent: unique symbol;
export declare const DecIndentAndCloseBlock: unique symbol;
export declare const NewLineMode: unique symbol;
export declare const RestoreLineMode: unique symbol;
export declare const PropertyDelimiter: unique symbol;
export declare const InlineMode: unique symbol;
export declare const NewLine: unique symbol;
export type Part = string | typeof IncIndent | typeof DecIndent | typeof NewLineMode | typeof DecIndentAndCloseBlock | typeof InlineMode | typeof NewLine | typeof RestoreLineMode | typeof PropertyDelimiter;
export type DocumentParts = Generator<Part, void>;
export type WriteOptions = {
    indent?: string;
    disableEslint?: boolean;
    header?: string;
};
export declare function writeDocumentPartsToStream(document: DocumentParts, stream: {
    write(chunk: string): void;
}, options?: WriteOptions): void;
export declare function writeDocumentPartsToString(document: DocumentParts, options?: WriteOptions): string;
export declare function inline(...parts: Array<Part | DocumentParts>): Generator<Part, void, unknown>;
export declare function indent(...parts: Array<Part | DocumentParts>): Generator<Part, void, unknown>;
export declare function jsDoc(docs: string | string[] | {
    description: string | string[];
    abiDescription?: string;
    params?: Record<string, string>;
    returns?: string;
}): Generator<string, void, unknown>;
