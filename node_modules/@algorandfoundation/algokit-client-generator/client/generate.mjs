import { inline, NewLine } from '../output/writer.mjs';
import { paramsFactory } from './params-factory.mjs';
import { appClient } from './app-client.mjs';
import { deployTypes } from './deploy-types.mjs';
import { utilityTypes } from './utility-types.mjs';
import { imports } from './imports.mjs';
import { createGeneratorContext } from './generator-context.mjs';
import { appTypes } from './app-types.mjs';
import { callComposerType } from './call-composer-types.mjs';
import { appFactory } from './app-factory.mjs';

function convertStructs(s, sanitizer) {
    return s.map(({ name, type }) => ({
        name: sanitizer.makeSafePropertyIdentifier(name),
        type: typeof type === 'string' ? type : convertStructs(type, sanitizer),
    }));
}
function* generate(app, options = { preserveNames: false }) {
    const ctx = createGeneratorContext(app, options);
    yield `/* eslint-disable */`;
    yield `/**`;
    yield ` * This file was automatically generated by @algorandfoundation/algokit-client-generator.`;
    yield ` * DO NOT MODIFY IT BY HAND.`;
    yield ` * requires: @algorandfoundation/algokit-utils: ^7`;
    yield ` */`;
    yield* imports();
    // Change the structs definition to sanitize property names according to the defined rules
    // for instance, this may (unless you passed in --preserve-names) convert properties like my_prop to myProp
    app.structs = Object.fromEntries(Object.keys(app.structs).map((key) => [key, convertStructs(app.structs[key], ctx.sanitizer)]));
    yield* inline('export const APP_SPEC: Arc56Contract = ', JSON.stringify(app), ' as unknown as Arc56Contract');
    yield NewLine;
    yield* utilityTypes();
    yield NewLine;
    yield* appTypes(ctx);
    yield* deployTypes(ctx);
    yield NewLine;
    // Write a call factory
    yield* paramsFactory(ctx);
    yield NewLine;
    // Write a factory
    yield* appFactory(ctx);
    // Write a client
    yield* appClient(ctx);
    yield* callComposerType(ctx);
}

export { generate };
//# sourceMappingURL=generate.mjs.map
