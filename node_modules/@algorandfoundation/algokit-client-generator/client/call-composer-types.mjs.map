{"version":3,"file":"call-composer-types.mjs","sources":["../../src/client/call-composer-types.ts"],"sourcesContent":["import { DecIndentAndCloseBlock, DocumentParts, IncIndent, jsDoc, NewLine } from '../output/writer'\nimport { GeneratorContext } from './generator-context'\n\nimport { BARE_CALL, MethodList } from './helpers/get-call-config-summary'\nimport { getCreateOnCompleteOptions } from './deploy-types'\nimport { ABIMethod } from 'algosdk'\n\nexport function* callComposerType(ctx: GeneratorContext): DocumentParts {\n  const { name, callConfig, app } = ctx\n  yield `export type ${name}Composer<TReturns extends [...any[]] = []> = {`\n  yield IncIndent\n\n  yield* callComposerTypeNoops(ctx)\n  yield* callComposerOperationMethodType(\n    ctx,\n    `Deletes an existing instance of the ${app.name} smart contract`,\n    callConfig.deleteMethods,\n    'delete',\n  )\n  yield* callComposerOperationMethodType(\n    ctx,\n    `Opts the user into an existing instance of the ${app.name} smart contract`,\n    callConfig.optInMethods,\n    'optIn',\n  )\n  yield* callComposerOperationMethodType(\n    ctx,\n    `Makes a close out call to an existing instance of the ${app.name} smart contract`,\n    callConfig.closeOutMethods,\n    'closeOut',\n  )\n  yield* callComposerOperationMethodType(\n    ctx,\n    `Updates an existing instance of the ${app.name} smart contract`,\n    callConfig.updateMethods,\n    'update',\n  )\n\n  yield* callComposerTypeClearState(ctx)\n\n  yield* jsDoc({\n    description: 'Adds a transaction to the composer',\n    params: {\n      txn: 'A transaction to add to the transaction group',\n      signer: 'The optional signer to use when signing this transaction.',\n    },\n  })\n  yield `addTransaction(txn: Transaction, signer?: TransactionSigner): ${name}Composer<TReturns>`\n\n  yield* jsDoc({\n    description: 'Returns the underlying AtomicTransactionComposer instance',\n  })\n  yield `composer(): Promise<TransactionComposer>`\n\n  yield* jsDoc({\n    description: 'Simulates the transaction group and returns the result',\n  })\n  yield `simulate(): Promise<${name}ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>`\n  yield `simulate(options: SkipSignaturesSimulateOptions): Promise<${name}ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>`\n  yield `simulate(options: RawSimulateOptions): Promise<${name}ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>`\n\n  yield* jsDoc({\n    description: 'Sends the transaction group to the network and returns the results',\n  })\n  yield `send(params?: SendParams): Promise<${name}ComposerResults<TReturns>>`\n\n  yield DecIndentAndCloseBlock\n\n  yield `\n  export type ${name}ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {\n    returns: TReturns\n  }>\n  `\n}\n\nfunction* callComposerTypeClearState({ app, name }: GeneratorContext): DocumentParts {\n  yield* jsDoc({\n    description: `Makes a clear_state call to an existing instance of the ${app.name} smart contract.`,\n    params: {\n      args: `The arguments for the bare call`,\n    },\n    returns: `The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions`,\n  })\n  yield `clearState(params?: AppClientBareCallParams): ${name}Composer<[...TReturns, undefined]>`\n  yield NewLine\n}\n\nfunction* callComposerTypeNoops({ app, name, callConfig, methodSignatureToUniqueName, sanitizer }: GeneratorContext): DocumentParts {\n  for (const method of app.methods) {\n    const methodSig = new ABIMethod(method).getSignature()\n    const methodSigSafe = sanitizer.makeSafeStringTypeLiteral(methodSig)\n    const methodName = sanitizer.makeSafeMethodIdentifier(methodSignatureToUniqueName[methodSig])\n    // Skip methods which don't support a no_op call config\n    if (!callConfig.callMethods.includes(methodSig)) continue\n\n    yield* jsDoc({\n      description: `Calls the ${new ABIMethod(method).getSignature()} ABI method.`,\n      abiDescription: method.desc,\n      params: {\n        args: `The arguments for the contract call`,\n        params: `Any additional parameters for the call`,\n      },\n      returns: `The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions`,\n    })\n    yield `${methodName}(params?: CallParams<${name}Args['obj']['${methodSigSafe}'] | ${name}Args['tuple']['${methodSigSafe}']>): ${name}Composer<[...TReturns, ${name}Returns['${methodSigSafe}'] | undefined]>`\n    yield NewLine\n  }\n}\n\nfunction* callComposerOperationMethodType(\n  { app, methodSignatureToUniqueName, name, sanitizer }: GeneratorContext,\n  description: string,\n  methods: MethodList,\n  verb: 'create' | 'update' | 'optIn' | 'closeOut' | 'delete',\n  includeCompilation?: boolean,\n): DocumentParts {\n  if (methods.length) {\n    yield* jsDoc(`Gets available ${verb} methods`)\n    yield `readonly ${verb}: {`\n    yield IncIndent\n    for (const methodSig of methods) {\n      const onComplete = verb === 'create' ? getCreateOnCompleteOptions(methodSig, app) : undefined\n      if (methodSig === BARE_CALL) {\n        yield* jsDoc({\n          description: `${description} using a bare call.`,\n          params: {\n            args: `The arguments for the bare call`,\n          },\n          returns: `The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions`,\n        })\n        yield `bare(params${onComplete?.isOptional !== false ? '?' : ''}: AppClientBareCallParams ${\n          includeCompilation ? '& AppClientCompilationParams' : ''\n        }): ${name}Composer<[...TReturns, undefined]>`\n      } else {\n        const uniqueName = methodSignatureToUniqueName[methodSig]\n        yield* jsDoc({\n          description: `${description} using the ${methodSig} ABI method.`,\n          params: {\n            args: `The arguments for the smart contract call`,\n            params: `Any additional parameters for the call`,\n          },\n          returns: `The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions`,\n        })\n        const methodSigSafe = sanitizer.makeSafeStringTypeLiteral(methodSig)\n        yield `${sanitizer.makeSafeMethodIdentifier(uniqueName)}(params${\n          onComplete?.isOptional !== false ? '?' : ''\n        }: CallParams<${name}Args['obj']['${methodSigSafe}'] | ${name}Args['tuple']['${methodSigSafe}']>${includeCompilation ? ' & AppClientCompilationParams' : ''}${\n          onComplete?.type ? ` & ${onComplete.type}` : ''\n        }): ${name}Composer<[...TReturns, ${name}Returns['${methodSigSafe}'] | undefined]>`\n      }\n    }\n    yield DecIndentAndCloseBlock\n    yield NewLine\n  }\n}\n"],"names":[],"mappings":"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"}