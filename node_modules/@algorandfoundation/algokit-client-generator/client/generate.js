'use strict';

var writer = require('../output/writer.js');
var paramsFactory = require('./params-factory.js');
var appClient = require('./app-client.js');
var deployTypes = require('./deploy-types.js');
var utilityTypes = require('./utility-types.js');
var imports = require('./imports.js');
var generatorContext = require('./generator-context.js');
var appTypes = require('./app-types.js');
var callComposerTypes = require('./call-composer-types.js');
var appFactory = require('./app-factory.js');

function convertStructs(s, sanitizer) {
    return s.map(({ name, type }) => ({
        name: sanitizer.makeSafePropertyIdentifier(name),
        type: typeof type === 'string' ? type : convertStructs(type, sanitizer),
    }));
}
function* generate(app, options = { preserveNames: false }) {
    const ctx = generatorContext.createGeneratorContext(app, options);
    yield `/* eslint-disable */`;
    yield `/**`;
    yield ` * This file was automatically generated by @algorandfoundation/algokit-client-generator.`;
    yield ` * DO NOT MODIFY IT BY HAND.`;
    yield ` * requires: @algorandfoundation/algokit-utils: ^7`;
    yield ` */`;
    yield* imports.imports();
    // Change the structs definition to sanitize property names according to the defined rules
    // for instance, this may (unless you passed in --preserve-names) convert properties like my_prop to myProp
    app.structs = Object.fromEntries(Object.keys(app.structs).map((key) => [key, convertStructs(app.structs[key], ctx.sanitizer)]));
    yield* writer.inline('export const APP_SPEC: Arc56Contract = ', JSON.stringify(app), ' as unknown as Arc56Contract');
    yield writer.NewLine;
    yield* utilityTypes.utilityTypes();
    yield writer.NewLine;
    yield* appTypes.appTypes(ctx);
    yield* deployTypes.deployTypes(ctx);
    yield writer.NewLine;
    // Write a call factory
    yield* paramsFactory.paramsFactory(ctx);
    yield writer.NewLine;
    // Write a factory
    yield* appFactory.appFactory(ctx);
    // Write a client
    yield* appClient.appClient(ctx);
    yield* callComposerTypes.callComposerType(ctx);
}

exports.generate = generate;
//# sourceMappingURL=generate.js.map
