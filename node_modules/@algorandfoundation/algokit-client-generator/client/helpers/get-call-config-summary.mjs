import { ABIMethod } from 'algosdk';

const BARE_CALL = Symbol('bare');
const getCallConfigSummary = (app) => {
    const result = {
        createMethods: [],
        callMethods: [],
        deleteMethods: [],
        updateMethods: [],
        optInMethods: [],
        closeOutMethods: [],
    };
    if (app.bareActions) {
        addToConfig(result, BARE_CALL, app.bareActions);
    }
    if (app.methods) {
        for (const m of app.methods) {
            if (m.actions) {
                addToConfig(result, new ABIMethod(m).getSignature(), m.actions);
            }
        }
    }
    return result;
};
const addToConfig = (result, method, config) => {
    if (hasCall(config, 'NoOp')) {
        result.callMethods.push(method);
    }
    if (hasCreate(config, 'NoOp') ||
        hasCreate(config, 'OptIn') ||
        hasCreate(config, 'CloseOut') ||
        hasCreate(config, 'UpdateApplication') ||
        hasCreate(config, 'DeleteApplication')) {
        result.createMethods.push(method);
    }
    if (hasCall(config, 'DeleteApplication')) {
        result.deleteMethods.push(method);
    }
    if (hasCall(config, 'UpdateApplication')) {
        result.updateMethods.push(method);
    }
    if (hasCall(config, 'OptIn')) {
        result.optInMethods.push(method);
    }
    if (hasCall(config, 'CloseOut')) {
        result.closeOutMethods.push(method);
    }
};
const hasCall = (config, action) => {
    return config?.call.includes(action);
};
const hasCreate = (config, action) => {
    return (config?.create).includes(action);
};

export { BARE_CALL, getCallConfigSummary };
//# sourceMappingURL=get-call-config-summary.mjs.map
