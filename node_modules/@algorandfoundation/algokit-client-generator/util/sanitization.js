'use strict';

var changeCase = require('change-case');

const replaceInvalidWithUnderscore = (value) => value.replace(/[^a-z0-9_$]+/gi, '_');
const escapeQuotes = (value) => value.replace(/['"]/g, (val) => `\\${val}`);
const removeEnclosingQuotes = (value) => value.replace(/^"|"$/g, '');
const defaultSanitiser = {
    makeSafePropertyIdentifier(value) {
        const options = value.startsWith('_') ? { prefixCharacters: '_' } : {};
        return changeCase.camelCase(replaceInvalidWithUnderscore(value), options);
    },
    makeSafeTypeIdentifier(value) {
        const options = value.startsWith('_') ? { prefixCharacters: '_' } : {};
        return changeCase.pascalCase(replaceInvalidWithUnderscore(value), options);
    },
    makeSafeMethodIdentifier(value) {
        const options = value.startsWith('_') ? { prefixCharacters: '_' } : {};
        return changeCase.camelCase(replaceInvalidWithUnderscore(value), options);
    },
    isSafeVariableIdentifier(value) {
        return /^[a-z$_][a-z0-9_$]*$/i.test(value);
    },
    makeSafeVariableIdentifier(value) {
        const options = value.startsWith('_') ? { prefixCharacters: '_' } : {};
        return changeCase.camelCase(replaceInvalidWithUnderscore(value), options);
    },
    makeSafeStringTypeLiteral(value) {
        return escapeQuotes(value);
    },
    getSafeMemberAccessor(value) {
        return this.isSafeVariableIdentifier(value) ? `.${value}` : `['${this.makeSafeStringTypeLiteral(value)}']`;
    },
};
const preservingSanitiser = {
    isSafeVariableIdentifier(value) {
        return /^[a-z$_][a-z0-9_$]*$/i.test(value);
    },
    makeSafeMethodIdentifier(value) {
        return this.isSafeVariableIdentifier(value) ? value : `"${this.makeSafeStringTypeLiteral(value)}"`;
    },
    makeSafePropertyIdentifier(value) {
        return this.isSafeVariableIdentifier(value) ? value : `"${this.makeSafeStringTypeLiteral(value)}"`;
    },
    makeSafeTypeIdentifier(value) {
        return replaceInvalidWithUnderscore(value);
    },
    makeSafeVariableIdentifier(value) {
        return replaceInvalidWithUnderscore(value);
    },
    makeSafeStringTypeLiteral(value) {
        return escapeQuotes(value);
    },
    getSafeMemberAccessor(value) {
        return this.isSafeVariableIdentifier(value) ? `.${value}` : `['${removeEnclosingQuotes(value)}']`;
    },
};
const getSanitizer = ({ preserveNames }) => (preserveNames ? preservingSanitiser : defaultSanitiser);

exports.getSanitizer = getSanitizer;
//# sourceMappingURL=sanitization.js.map
