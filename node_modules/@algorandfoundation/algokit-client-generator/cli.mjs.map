{"version":3,"file":"cli.mjs","sources":["../src/cli.ts"],"sourcesContent":["import { Command } from 'commander'\nimport { loadApplicationJson } from './schema/load'\nimport * as path from 'path'\nimport { generate } from './client/generate'\nimport { writeDocumentPartsToStream } from './output/writer'\nimport { colorConsole } from './util/color-console'\n\nexport function cli(workingDirectory: string, args: string[]) {\n  const program = new Command()\n  program\n    .command('generate')\n    .description('Generates a TypeScript client for the given application.json file')\n    .requiredOption('-a --application <path>', 'Specifies the application.json file')\n    .requiredOption('-o --output <path>', 'Specifies the output file path')\n    .option('-pn --preserve-names', 'Preserve names from application.json spec instead of sanitizing them')\n    .action(\n      async ({ application, output, preserveNames }: { application: string; output: string; preserveNames?: boolean }): Promise<void> => {\n        await generateClientCommand({\n          application,\n          output,\n          preserveNames: Boolean(preserveNames),\n          workingDirectory,\n        })\n        colorConsole.success`Operation completed successfully`\n      },\n    )\n    .configureOutput({\n      writeErr(str: string) {\n        colorConsole.error`${str}`\n      },\n    })\n  try {\n    program.parse(args)\n  } catch (err) {\n    if (err instanceof Error) {\n      colorConsole.error`Unhandled error: \\n\\n${err.stack}`\n    } else {\n      colorConsole.error`Unhandled error: \\n\\n${err}`\n    }\n    process.exit(-1)\n  }\n}\n\nexport async function generateClientCommand({\n  application,\n  output,\n  preserveNames,\n  workingDirectory,\n}: {\n  application: string\n  output: string\n  preserveNames: boolean\n  workingDirectory: string\n}) {\n  const fs = await import('fs')\n\n  const resolvedAppJsonPath = path.resolve(workingDirectory, application)\n  const resolvedOutPath = path.resolve(workingDirectory, output)\n  const resolvedOutDir = path.dirname(resolvedOutPath)\n  colorConsole.info`Reading application.json file from path ${resolvedAppJsonPath}`\n  const spec = await loadApplicationJson(resolvedAppJsonPath)\n  colorConsole.info`Generating TS client for ${spec.name}`\n  const parts = generate(spec, { preserveNames })\n  if (!fs.existsSync(resolvedOutDir)) {\n    colorConsole.warn`Output directory ${resolvedOutDir} does not exist and will be created.`\n    fs.mkdirSync(resolvedOutDir, { recursive: true })\n  }\n  colorConsole.info`Writing TS client to ${resolvedOutPath}`\n  const file = await createAwaitableWriteStream(resolvedOutPath)\n  writeDocumentPartsToStream(parts, file)\n  await file.finish()\n}\n\nasync function createAwaitableWriteStream(path: string) {\n  const fs = await import('fs')\n  const stream = fs.createWriteStream(path, {\n    flags: 'w',\n  })\n  const finish = new Promise<void>((resolve, reject) => {\n    stream.on('error', (err) => {\n      reject(err)\n    })\n    stream.on('finish', () => {\n      resolve()\n    })\n  })\n  return {\n    write(chunk: string): void {\n      stream.write(chunk)\n    },\n    finish() {\n      stream.end()\n      return finish\n    },\n  }\n}\n"],"names":[],"mappings":"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"}