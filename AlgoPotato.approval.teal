#pragma version 10
#pragma typetrack false

// algopotato.AlgoPotato.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 4 2 600011887
    bytecblock "games_played" 0x0000000000000000 "" "counter" 0x151f7c75 0x068101
    txn ApplicationID
    bnz main_after_if_else@2
    // algopotato.py:33
    // self.games_played = UInt64(0)
    bytec_0 // "games_played"
    intc_0 // 0
    app_global_put
    // algopotato.py:34
    // self.counter = UInt64(0)
    bytec_3 // "counter"
    intc_0 // 0
    app_global_put
    // algopotato.py:36
    // self.vrf_app_id = Application(600011887) #Testnet
    pushbytes "vrf_app_id"
    intc 4 // 600011887
    app_global_put

main_after_if_else@2:
    // algopotato.py:23
    // class AlgoPotato(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0x28c5beea 0x03e20bea 0xa9c22586 0x2f3924d7 0x8351dab7 // method "asset_opt_in(asset,txn)void", method "create_game(txn,txn)void", method "prime_game_vrf((address,uint64),txn)void", method "play_game((address,uint64))string", method "cancel_game((address,uint64))void"
    txna ApplicationArgs 0
    match main_asset_opt_in_route@5 main_create_game_route@6 main_prime_game_vrf_route@7 main_play_game_route@8 main_cancel_game_route@9

main_after_if_else@12:
    // algopotato.py:23
    // class AlgoPotato(ARC4Contract):
    intc_0 // 0
    return

main_cancel_game_route@9:
    // algopotato.py:458
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // algopotato.py:23
    // class AlgoPotato(ARC4Contract):
    txna ApplicationArgs 1
    // algopotato.py:458
    // @abimethod
    callsub cancel_game
    intc_1 // 1
    return

main_play_game_route@8:
    // algopotato.py:397
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // algopotato.py:23
    // class AlgoPotato(ARC4Contract):
    txna ApplicationArgs 1
    // algopotato.py:397
    // @abimethod
    callsub play_game
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec 4 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_prime_game_vrf_route@7:
    // algopotato.py:237
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // algopotato.py:23
    // class AlgoPotato(ARC4Contract):
    txna ApplicationArgs 1
    txn GroupIndex
    intc_1 // 1
    -
    // algopotato.py:237
    // @abimethod
    callsub prime_game_vrf
    intc_1 // 1
    return

main_create_game_route@6:
    // algopotato.py:170
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // algopotato.py:23
    // class AlgoPotato(ARC4Contract):
    txn GroupIndex
    intc_3 // 2
    -
    txn GroupIndex
    intc_1 // 1
    -
    // algopotato.py:170
    // @abimethod
    callsub create_game
    intc_1 // 1
    return

main_asset_opt_in_route@5:
    // algopotato.py:53
    // @abimethod
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // algopotato.py:23
    // class AlgoPotato(ARC4Contract):
    txna ApplicationArgs 1
    btoi
    txnas Assets
    txn GroupIndex
    intc_1 // 1
    -
    // algopotato.py:53
    // @abimethod
    callsub asset_opt_in
    intc_1 // 1
    return

main_bare_routing@10:
    // algopotato.py:23
    // class AlgoPotato(ARC4Contract):
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// algopotato.AlgoPotato.contract_is_receiver(txn: uint64) -> void:
contract_is_receiver:
    // algopotato.py:40-44
    // @subroutine
    // def contract_is_receiver(
    //     self,
    //     txn: gtxn.Transaction,
    // ) -> None:
    proto 1 0
    // algopotato.py:48
    // if txn.type == TransactionType.Payment:
    frame_dig -1
    gtxns TypeEnum
    dup
    intc_1 // pay
    ==
    bz contract_is_receiver_else_body@2
    // algopotato.py:49
    // assert txn.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert

contract_is_receiver_after_if_else@5:
    retsub

contract_is_receiver_else_body@2:
    // algopotato.py:50
    // elif txn.type == TransactionType.AssetTransfer:
    frame_dig 0
    intc_2 // axfer
    ==
    bz contract_is_receiver_after_if_else@5
    // algopotato.py:51
    // assert txn.asset_receiver == Global.current_application_address
    frame_dig -1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    assert
    retsub


// algopotato.AlgoPotato.asset_opt_in(asset: uint64, mbr_payment: uint64) -> void:
asset_opt_in:
    // algopotato.py:53-58
    // @abimethod
    // def asset_opt_in(
    //     self,
    //     asset: Asset,
    //     mbr_payment: gtxn.Transaction
    // ) -> None:
    proto 2 0
    // algopotato.py:64
    // self.contract_is_receiver(mbr_payment)
    frame_dig -1
    callsub contract_is_receiver
    // algopotato.py:66
    // if Global.current_application_address.is_opted_in(asset) == False:
    global CurrentApplicationAddress
    frame_dig -2
    asset_holding_get AssetBalance
    bury 1
    bnz asset_opt_in_else_body@2
    // algopotato.py:67
    // assert mbr_payment.amount == 100_000
    frame_dig -1
    gtxns Amount
    pushint 100000 // 100000
    ==
    assert
    // algopotato.py:82-85
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=Global.current_application_address
    // ).submit()
    itxn_begin
    // algopotato.py:84
    // asset_receiver=Global.current_application_address
    global CurrentApplicationAddress
    itxn_field AssetReceiver
    frame_dig -2
    itxn_field XferAsset
    // algopotato.py:82
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // algopotato.py:82-85
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=Global.current_application_address
    // ).submit()
    itxn_submit
    retsub

asset_opt_in_else_body@2:
    // algopotato.py:71
    // assert mbr_payment.amount == 0
    frame_dig -1
    gtxns Amount
    !
    assert
    retsub


// algopotato.AlgoPotato.create_game(asset_deposit: uint64, mbr_fee: uint64) -> void:
create_game:
    // algopotato.py:170-175
    // @abimethod
    // def create_game(
    //     self,
    //     asset_deposit: gtxn.Transaction,
    //     mbr_fee: gtxn.Transaction
    // ) -> None:
    proto 2 0
    // algopotato.py:184
    // self.contract_is_receiver(asset_deposit)
    frame_dig -2
    callsub contract_is_receiver
    // algopotato.py:185
    // self.contract_is_receiver(mbr_fee)
    frame_dig -1
    callsub contract_is_receiver
    // algopotato.py:98
    // asset_id = UInt64(0)
    intc_0 // 0
    // algopotato.py:99
    // amount_deposited = UInt64(0)
    dup
    // algopotato.py:101
    // assert asset_deposit.type in (TransactionType.Payment, TransactionType.AssetTransfer)
    frame_dig -2
    gtxns TypeEnum
    dup
    intc_1 // pay
    ==
    dup
    bnz create_game_bool_true@3
    frame_dig 2
    intc_2 // axfer
    ==
    bz create_game_bool_false@4

create_game_bool_true@3:
    intc_1 // 1

create_game_bool_merge@5:
    // algopotato.py:101
    // assert asset_deposit.type in (TransactionType.Payment, TransactionType.AssetTransfer)
    assert
    // algopotato.py:103
    // if asset_deposit.type == TransactionType.Payment:
    frame_dig 3
    bz create_game_else_body@7
    // algopotato.py:104
    // asset_id = UInt64(0)
    intc_0 // 0
    frame_bury 0
    // algopotato.py:105
    // amount_deposited = asset_deposit.amount
    frame_dig -2
    gtxns Amount
    frame_bury 1

create_game_after_if_else@10:
    // algopotato.py:111
    // assert amount_deposited != 0
    frame_dig 1
    dup
    assert
    // algopotato.py:123
    // user_addr = Address(Txn.sender)
    txn Sender
    // algopotato.py:124
    // counter = arc4.UInt64(self.counter)
    intc_0 // 0
    bytec_3 // "counter"
    app_global_get_ex
    assert // check self.counter exists
    itob
    // algopotato.py:126-129
    // return GameBoxName(
    //     player_1=user_addr,
    //     counter=counter
    // )
    concat
    // algopotato.py:142
    // user_addr = Address(Txn.sender)
    txn Sender
    // algopotato.py:146
    // player_2=Address(Global.zero_address),
    global ZeroAddress
    // algopotato.py:147
    // player_1_round=arc4.UInt64(Global.round),
    global Round
    itob
    // algopotato.py:150
    // asset=arc4.UInt64(asset_id),
    frame_dig 0
    itob
    // algopotato.py:151
    // asset_amount=arc4.UInt64(asset_amount)
    uncover 5
    itob
    // algopotato.py:144-152
    // return GameBoxValue(
    //         player_1=user_addr,
    //         player_2=Address(Global.zero_address),
    //         player_1_round=arc4.UInt64(Global.round),
    //         player_2_round=arc4.UInt64(0),
    //         vrf_round=arc4.UInt64(0),
    //         asset=arc4.UInt64(asset_id),
    //         asset_amount=arc4.UInt64(asset_amount)
    // )
    uncover 4
    uncover 4
    concat
    uncover 3
    concat
    // algopotato.py:148
    // player_2_round=arc4.UInt64(0),
    bytec_1 // 0x0000000000000000
    // algopotato.py:144-152
    // return GameBoxValue(
    //         player_1=user_addr,
    //         player_2=Address(Global.zero_address),
    //         player_1_round=arc4.UInt64(Global.round),
    //         player_2_round=arc4.UInt64(0),
    //         vrf_round=arc4.UInt64(0),
    //         asset=arc4.UInt64(asset_id),
    //         asset_amount=arc4.UInt64(asset_amount)
    // )
    concat
    // algopotato.py:149
    // vrf_round=arc4.UInt64(0),
    bytec_1 // 0x0000000000000000
    // algopotato.py:144-152
    // return GameBoxValue(
    //         player_1=user_addr,
    //         player_2=Address(Global.zero_address),
    //         player_1_round=arc4.UInt64(Global.round),
    //         player_2_round=arc4.UInt64(0),
    //         vrf_round=arc4.UInt64(0),
    //         asset=arc4.UInt64(asset_id),
    //         asset_amount=arc4.UInt64(asset_amount)
    // )
    concat
    uncover 2
    concat
    swap
    concat
    // algopotato.py:193
    // self.game_box[game_box_name] = game_box_value.copy()
    box_put
    retsub

create_game_else_body@7:
    // algopotato.py:107
    // elif asset_deposit.type == TransactionType.AssetTransfer:
    frame_dig 2
    intc_2 // axfer
    ==
    bz create_game_after_if_else@10
    // algopotato.py:108
    // asset_id = asset_deposit.xfer_asset.id
    frame_dig -2
    gtxns XferAsset
    frame_bury 0
    // algopotato.py:109
    // amount_deposited = asset_deposit.asset_amount
    frame_dig -2
    gtxns AssetAmount
    frame_bury 1
    b create_game_after_if_else@10

create_game_bool_false@4:
    intc_0 // 0
    b create_game_bool_merge@5


// algopotato.AlgoPotato.prime_game_vrf(game_box_name: bytes, asset_deposit: uint64) -> void:
prime_game_vrf:
    // algopotato.py:237-242
    // @abimethod
    // def prime_game_vrf(
    //     self,
    //     game_box_name: GameBoxName,
    //     asset_deposit: gtxn.Transaction,
    // ) -> None:
    proto 2 0
    // algopotato.py:251
    // self.contract_is_receiver(asset_deposit)
    frame_dig -1
    callsub contract_is_receiver
    // algopotato.py:253
    // game_box = self.game_box[game_box_name].copy()
    frame_dig -2
    box_get
    assert // check self.game_box entry exists
    // algopotato.py:208
    // assert asset_deposit.type in (TransactionType.AssetTransfer, TransactionType.Payment)
    frame_dig -1
    gtxns TypeEnum
    dup
    intc_2 // axfer
    ==
    bnz prime_game_vrf_bool_true@3
    frame_dig 1
    intc_1 // pay
    ==
    bz prime_game_vrf_bool_false@4

prime_game_vrf_bool_true@3:
    intc_1 // 1

prime_game_vrf_bool_merge@5:
    // algopotato.py:208
    // assert asset_deposit.type in (TransactionType.AssetTransfer, TransactionType.Payment)
    assert
    // algopotato.py:210
    // if asset_deposit.type == TransactionType.Payment:
    frame_dig 1
    intc_1 // pay
    ==
    bz prime_game_vrf_else_body@7
    // algopotato.py:211
    // assert game_box_value.asset == 0
    frame_dig 0
    dup
    extract 88 8 // on error: Index access is out of bounds
    bytec_1 // 0x0000000000000000
    b==
    assert
    // algopotato.py:212
    // assert game_box_value.asset_amount == asset_deposit.amount
    extract 96 8 // on error: Index access is out of bounds
    frame_dig -1
    gtxns Amount
    itob
    b==
    assert

prime_game_vrf_after_if_else@8:
    // algopotato.py:230
    // assert game_box.player_2 == Global.zero_address
    frame_dig 0
    dup
    extract 32 32 // on error: Index access is out of bounds
    global ZeroAddress
    ==
    assert
    // algopotato.py:231
    // game_box.player_2 = Address(Txn.sender)
    txn Sender
    replace2 32
    // algopotato.py:232
    // game_box.player_2_round = arc4.UInt64(Global.round)
    global Round
    itob
    replace2 72
    // algopotato.py:233
    // game_box.vrf_round = arc4.UInt64(Global.round + 9)
    global Round
    pushint 9 // 9
    +
    itob
    replace2 80
    // algopotato.py:258
    // self.game_box[game_box_name] = game_box.copy()
    frame_dig -2
    swap
    box_put
    retsub

prime_game_vrf_else_body@7:
    // algopotato.py:215
    // assert game_box_value.asset == asset_deposit.xfer_asset.id
    frame_dig 0
    dup
    extract 88 8 // on error: Index access is out of bounds
    frame_dig -1
    gtxns XferAsset
    itob
    b==
    assert
    // algopotato.py:216
    // assert game_box_value.asset_amount == asset_deposit.asset_amount
    extract 96 8 // on error: Index access is out of bounds
    frame_dig -1
    gtxns AssetAmount
    itob
    b==
    assert
    b prime_game_vrf_after_if_else@8

prime_game_vrf_bool_false@4:
    intc_0 // 0
    b prime_game_vrf_bool_merge@5


// algopotato.AlgoPotato.play_game(game_box_name: bytes) -> bytes:
play_game:
    // algopotato.py:397-401
    // @abimethod
    // def play_game(
    //     self,
    //     game_box_name: GameBoxName,
    // ) -> String:
    proto 1 1
    intc_0 // 0
    dupn 6
    bytec_2 // ""
    dupn 7

play_game_while_top@25:
    pushint 10010 // 10010
    global OpcodeBudget
    >
    bz play_game_after_while@30
    itxn_begin
    pushint 6 // appl
    itxn_field TypeEnum
    pushint 5 // DeleteApplication
    itxn_field OnCompletion
    bytec 5 // 0x068101
    itxn_field ApprovalProgram
    bytec 5 // 0x068101
    itxn_field ClearStateProgram
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    b play_game_while_top@25

play_game_after_while@30:
    // algopotato.py:421
    // game_box = self.game_box[game_box_name].copy()
    frame_dig -1
    box_get
    swap
    dup
    cover 2
    frame_bury 0
    assert // check self.game_box entry exists
    // algopotato.py:395
    // assert game_box.vrf_round != 0
    dup
    extract 80 8 // on error: Index access is out of bounds
    dup
    frame_bury 6
    bytec_1 // 0x0000000000000000
    b!=
    assert
    // algopotato.py:278
    // if Global.round - vrf_round.native > 1512:
    global Round
    swap
    // algopotato.py:276
    // vrf_round = game_box.vrf_round
    pushint 80 // 80
    // algopotato.py:278
    // if Global.round - vrf_round.native > 1512:
    extract_uint64
    -
    pushint 1512 // 1512
    >
    bz play_game_after_if_else@36
    // algopotato.py:279
    // return UInt64(0), False
    intc_0 // 0
    dup
    frame_bury 14
    frame_bury 11

play_game_after_inlined_algopotato.AlgoPotato.get_vrf_output_modulo@37:
    // algopotato.py:359
    // player_1 = game_box.player_1.native
    frame_dig 0
    dup
    extract 0 32 // on error: Index access is out of bounds
    frame_bury 1
    // algopotato.py:360
    // player_2 = game_box.player_2.native
    dup
    extract 32 32 // on error: Index access is out of bounds
    frame_bury 2
    // algopotato.py:362
    // asset = game_box.asset.native
    dup
    pushint 88 // 88
    extract_uint64
    dup
    cover 2
    frame_bury 7
    // algopotato.py:363
    // asset_amount = game_box.asset_amount.native * 2
    pushint 96 // 96
    extract_uint64
    intc_3 // 2
    *
    frame_bury 8
    // algopotato.py:365
    // if asset == 0:
    bnz play_game_else_body@40
    // algopotato.py:366
    // return True, String('')
    intc_1 // 1
    bytec_2 // ""
    frame_bury 5
    frame_bury 9

play_game_after_inlined_algopotato.AlgoPotato.verify_both_users_opted_in@45:
    // algopotato.py:429
    // if valid_vrf_round == False:
    frame_dig 14
    bnz play_game_else_body@2
    // algopotato.py:430
    // game_box.vrf_round = arc4.UInt64(Global.round + 9)
    global Round
    pushint 9 // 9
    +
    itob
    frame_dig 0
    swap
    replace2 80
    // algopotato.py:431
    // self.game_box[game_box_name] = game_box.copy()
    frame_dig -1
    swap
    box_put
    // algopotato.py:432
    // return String("VRF Round expired")
    pushbytes "VRF Round expired"
    frame_bury 0
    retsub

play_game_else_body@2:
    // algopotato.py:434
    // elif not both_users_opted_into_asset:
    frame_dig 9
    bnz play_game_else_body@4
    // algopotato.py:436
    // del self.game_box[game_box_name]
    frame_dig -1
    box_del
    pop
    // algopotato.py:438
    // self.games_played += 1
    intc_0 // 0
    bytec_0 // "games_played"
    app_global_get_ex
    assert // check self.games_played exists
    intc_1 // 1
    +
    bytec_0 // "games_played"
    swap
    app_global_put
    // algopotato.py:440
    // return return_message
    frame_dig 5
    frame_bury 0
    retsub

play_game_else_body@4:
    // algopotato.py:311
    // potato_holder = Global.zero_address
    global ZeroAddress
    frame_bury 3
    // algopotato.py:313
    // for i in urange(modulo_240_vrf_bytes_as_int + 1):
    frame_dig 11
    intc_1 // 1
    +
    frame_bury 12
    intc_0 // 0
    frame_bury 10

play_game_for_header@8:
    // algopotato.py:313
    // for i in urange(modulo_240_vrf_bytes_as_int + 1):
    frame_dig 10
    frame_dig 12
    <
    frame_dig 3
    frame_bury 4
    bz play_game_after_for@22
    // algopotato.py:314
    // if i % 2 == 0:
    frame_dig 10
    intc_3 // 2
    %
    dup
    frame_bury 13
    bnz play_game_after_if_else@11
    frame_dig 1
    frame_bury 3

play_game_after_if_else@11:
    // algopotato.py:317
    // if i % 2 != 0:
    frame_dig 13
    bz play_game_after_if_else@13
    frame_dig 2
    frame_bury 3

play_game_after_if_else@13:
    // algopotato.py:320
    // if i == modulo_240_vrf_bytes_as_int:
    frame_dig 10
    frame_dig 11
    ==
    bz play_game_after_if_else@18
    // algopotato.py:321
    // if asset_id == 0:
    frame_dig 7
    bnz play_game_else_body@16
    // algopotato.py:322-325
    // itxn.Payment(
    //     receiver=potato_holder,
    //     amount=asset_amount,
    // ).submit()
    itxn_begin
    frame_dig 8
    itxn_field Amount
    frame_dig 3
    itxn_field Receiver
    // algopotato.py:322
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // algopotato.py:322-325
    // itxn.Payment(
    //     receiver=potato_holder,
    //     amount=asset_amount,
    // ).submit()
    itxn_submit

play_game_after_if_else@17:
    frame_dig 3
    frame_bury 4

play_game_after_for@22:
    frame_dig 4
    // algopotato.py:447
    // del self.game_box[game_box_name]
    frame_dig -1
    box_del
    pop
    // algopotato.py:449
    // self.games_played += 1
    intc_0 // 0
    bytec_0 // "games_played"
    app_global_get_ex
    assert // check self.games_played exists
    intc_1 // 1
    +
    bytec_0 // "games_played"
    swap
    app_global_put
    // algopotato.py:451
    // if potato_holder == player_1:
    frame_dig 1
    ==
    bz play_game_else_body@6
    // algopotato.py:452
    // return String("Player 1 Wins!")
    pushbytes "Player 1 Wins!"
    frame_bury 0
    retsub

play_game_else_body@6:
    // algopotato.py:454
    // return String("Player 2 Wins!")
    pushbytes "Player 2 Wins!"
    frame_bury 0
    retsub

play_game_else_body@16:
    // algopotato.py:327-331
    // itxn.AssetTransfer(
    //     xfer_asset=asset_id,
    //     asset_receiver=potato_holder,
    //     asset_amount=asset_amount,
    // ).submit()
    itxn_begin
    frame_dig 8
    itxn_field AssetAmount
    frame_dig 3
    itxn_field AssetReceiver
    frame_dig 7
    itxn_field XferAsset
    // algopotato.py:327
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // algopotato.py:327-331
    // itxn.AssetTransfer(
    //     xfer_asset=asset_id,
    //     asset_receiver=potato_holder,
    //     asset_amount=asset_amount,
    // ).submit()
    itxn_submit
    b play_game_after_if_else@17

play_game_after_if_else@18:
    // algopotato.py:334
    // if asset_id == 0:
    frame_dig 7
    bnz play_game_else_body@20
    // algopotato.py:335-338
    // itxn.Payment(
    //     receiver=potato_holder,
    //     amount=0,
    // ).submit()
    itxn_begin
    // algopotato.py:337
    // amount=0,
    intc_0 // 0
    itxn_field Amount
    frame_dig 3
    itxn_field Receiver
    // algopotato.py:335
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // algopotato.py:335-338
    // itxn.Payment(
    //     receiver=potato_holder,
    //     amount=0,
    // ).submit()
    itxn_submit

play_game_after_if_else@21:
    // algopotato.py:313
    // for i in urange(modulo_240_vrf_bytes_as_int + 1):
    frame_dig 10
    intc_1 // 1
    +
    frame_bury 10
    b play_game_for_header@8

play_game_else_body@20:
    // algopotato.py:340-344
    // itxn.AssetTransfer(
    //     xfer_asset=asset_id,
    //     asset_receiver=potato_holder,
    //     asset_amount=0,
    // ).submit()
    itxn_begin
    // algopotato.py:343
    // asset_amount=0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig 3
    itxn_field AssetReceiver
    frame_dig 7
    itxn_field XferAsset
    // algopotato.py:340
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // algopotato.py:340-344
    // itxn.AssetTransfer(
    //     xfer_asset=asset_id,
    //     asset_receiver=potato_holder,
    //     asset_amount=0,
    // ).submit()
    itxn_submit
    b play_game_after_if_else@21

play_game_else_body@40:
    // algopotato.py:368
    // elif player_1.is_opted_in(Asset(asset)) == False:
    frame_dig 1
    frame_dig 7
    asset_holding_get AssetBalance
    bury 1
    bnz play_game_else_body@42
    // algopotato.py:369-373
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=player_2,
    //     asset_amount=asset_amount
    // ).submit()
    itxn_begin
    frame_dig 8
    itxn_field AssetAmount
    frame_dig 2
    itxn_field AssetReceiver
    frame_dig 7
    itxn_field XferAsset
    // algopotato.py:369
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // algopotato.py:369-373
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=player_2,
    //     asset_amount=asset_amount
    // ).submit()
    itxn_submit
    // algopotato.py:375
    // return False, String("Player 1 Forfeit by opting out")
    intc_0 // 0
    pushbytes "Player 1 Forfeit by opting out"
    frame_bury 5
    frame_bury 9
    // algopotato.py:427
    // both_users_opted_into_asset, return_message = self.verify_both_users_opted_in(game_box.copy())
    b play_game_after_inlined_algopotato.AlgoPotato.verify_both_users_opted_in@45

play_game_else_body@42:
    // algopotato.py:377
    // elif player_2.is_opted_in(Asset(asset)) == False:
    frame_dig 2
    frame_dig 7
    asset_holding_get AssetBalance
    bury 1
    bnz play_game_else_body@44
    // algopotato.py:378-382
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=player_1,
    //     asset_amount=asset_amount
    // ).submit()
    itxn_begin
    frame_dig 8
    itxn_field AssetAmount
    frame_dig 1
    itxn_field AssetReceiver
    frame_dig 7
    itxn_field XferAsset
    // algopotato.py:378
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // algopotato.py:378-382
    // itxn.AssetTransfer(
    //     xfer_asset=asset,
    //     asset_receiver=player_1,
    //     asset_amount=asset_amount
    // ).submit()
    itxn_submit
    // algopotato.py:384
    // return False, String("Player 2 Forfeit by opting out")
    intc_0 // 0
    pushbytes "Player 2 Forfeit by opting out"
    frame_bury 5
    frame_bury 9
    // algopotato.py:427
    // both_users_opted_into_asset, return_message = self.verify_both_users_opted_in(game_box.copy())
    b play_game_after_inlined_algopotato.AlgoPotato.verify_both_users_opted_in@45

play_game_else_body@44:
    // algopotato.py:387
    // return True, String('')
    intc_1 // 1
    bytec_2 // ""
    frame_bury 5
    frame_bury 9
    // algopotato.py:427
    // both_users_opted_into_asset, return_message = self.verify_both_users_opted_in(game_box.copy())
    b play_game_after_inlined_algopotato.AlgoPotato.verify_both_users_opted_in@45

play_game_after_if_else@36:
    // algopotato.py:283-288
    // result, txn = abi_call[Bytes](
    //     'must_get(uint64,byte[])byte[]',
    //     vrf_round,
    //     game_box_as_bytes,
    //     app_id=600011887,
    // )
    itxn_begin
    // algopotato.py:286
    // game_box_as_bytes,
    frame_dig 0
    dup
    len
    itob
    extract 6 2
    swap
    concat
    // algopotato.py:287
    // app_id=600011887,
    intc 4 // 600011887
    itxn_field ApplicationID
    // algopotato.py:283-288
    // result, txn = abi_call[Bytes](
    //     'must_get(uint64,byte[])byte[]',
    //     vrf_round,
    //     game_box_as_bytes,
    //     app_id=600011887,
    // )
    pushbytes 0x47c20c23 // method "must_get(uint64,byte[])byte[]"
    itxn_field ApplicationArgs
    frame_dig 6
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    pushint 6 // appl
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    itxn LastLog
    dup
    extract 0 4
    bytec 4 // 0x151f7c75
    ==
    assert // ARC4 prefix is valid
    extract 6 0
    // algopotato.py:291
    // modulo_240_vrf_bytes_as_int = op.btoi((vrf_bytes_as_integer.native % 240).bytes)
    pushbytes 0xf0
    b%
    btoi
    frame_bury 11
    // algopotato.py:293
    // return modulo_240_vrf_bytes_as_int, True
    intc_1 // 1
    frame_bury 14
    // algopotato.py:425
    // modulo_240_vrf_bytes_as_int, valid_vrf_round = self.get_vrf_output_modulo(game_box.copy())
    b play_game_after_inlined_algopotato.AlgoPotato.get_vrf_output_modulo@37


// algopotato.AlgoPotato.cancel_game(game_box_name: bytes) -> void:
cancel_game:
    // algopotato.py:458-462
    // @abimethod
    // def cancel_game(
    //     self,
    //     game_box_name: GameBoxName
    // ) -> None:
    proto 1 0
    // algopotato.py:467
    // game_box = self.game_box[game_box_name].copy()
    frame_dig -1
    box_get
    assert // check self.game_box entry exists
    // algopotato.py:469
    // player_1 = game_box.player_1.native
    dup
    extract 0 32 // on error: Index access is out of bounds
    swap
    // algopotato.py:470
    // player_2 = game_box.player_2.native
    dup
    extract 32 32 // on error: Index access is out of bounds
    // algopotato.py:473
    // asset = game_box.asset.native
    dig 1
    pushint 88 // 88
    extract_uint64
    dup
    cover 3
    cover 4
    // algopotato.py:474
    // asset_amount = game_box.asset_amount.native
    swap
    pushint 96 // 96
    extract_uint64
    cover 3
    // algopotato.py:476
    // assert player_2 == Global.zero_address
    global ZeroAddress
    ==
    assert
    // algopotato.py:478
    // if asset == 0:
    bnz cancel_game_else_body@3
    // algopotato.py:479-482
    // itxn.Payment(
    //     receiver=player_1,
    //     amount=asset_amount
    // ).submit()
    itxn_begin
    itxn_field Receiver
    itxn_field Amount
    // algopotato.py:479
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // algopotato.py:479-482
    // itxn.Payment(
    //     receiver=player_1,
    //     amount=asset_amount
    // ).submit()
    itxn_submit

cancel_game_after_if_else@5:
    // algopotato.py:491
    // del self.game_box[game_box_name]
    frame_dig -1
    box_del
    pop
    retsub

cancel_game_else_body@3:
    // algopotato.py:485-489
    // itxn.AssetTransfer(
    //     asset_receiver=player_1,
    //     xfer_asset=asset,
    //     asset_amount=asset_amount
    // ).submit()
    itxn_begin
    swap
    itxn_field AssetAmount
    frame_dig 0
    itxn_field XferAsset
    itxn_field AssetReceiver
    // algopotato.py:485
    // itxn.AssetTransfer(
    intc_2 // axfer
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    // algopotato.py:485-489
    // itxn.AssetTransfer(
    //     asset_receiver=player_1,
    //     xfer_asset=asset,
    //     asset_amount=asset_amount
    // ).submit()
    itxn_submit
    b cancel_game_after_if_else@5
