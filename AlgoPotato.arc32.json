{
    "hints": {
        "asset_opt_in(asset,txn)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "create_game(txn,txn)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "prime_game_vrf((address,uint64),txn)void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "game_box_name": {
                    "name": "GameBoxName",
                    "elements": [
                        [
                            "player_1",
                            "address"
                        ],
                        [
                            "counter",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "play_game((address,uint64))string": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "game_box_name": {
                    "name": "GameBoxName",
                    "elements": [
                        [
                            "player_1",
                            "address"
                        ],
                        [
                            "counter",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "cancel_game((address,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "game_box_name": {
                    "name": "GameBoxName",
                    "elements": [
                        [
                            "player_1",
                            "address"
                        ],
                        [
                            "counter",
                            "uint64"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcG90YXRvLkFsZ29Qb3RhdG8uX19hbGdvcHlfZW50cnlwb2ludF93aXRoX2luaXQoKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDQgMiA2MDAwMTE4ODcKICAgIGJ5dGVjYmxvY2sgImdhbWVzX3BsYXllZCIgMHgwMDAwMDAwMDAwMDAwMDAwICIiICJjb3VudGVyIiAweDE1MWY3Yzc1IDB4MDY4MTAxCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBhbGdvcG90YXRvLnB5OjMzCiAgICAvLyBzZWxmLmdhbWVzX3BsYXllZCA9IFVJbnQ2NCgwKQogICAgYnl0ZWNfMCAvLyAiZ2FtZXNfcGxheWVkIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBhbGdvcG90YXRvLnB5OjM0CiAgICAvLyBzZWxmLmNvdW50ZXIgPSBVSW50NjQoMCkKICAgIGJ5dGVjXzMgLy8gImNvdW50ZXIiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIGFsZ29wb3RhdG8ucHk6MzYKICAgIC8vIHNlbGYudnJmX2FwcF9pZCA9IEFwcGxpY2F0aW9uKDYwMDAxMTg4NykgI1Rlc3RuZXQKICAgIHB1c2hieXRlcyAidnJmX2FwcF9pZCIKICAgIGludGMgNCAvLyA2MDAwMTE4ODcKICAgIGFwcF9nbG9iYWxfcHV0CgptYWluX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIGFsZ29wb3RhdG8ucHk6MjMKICAgIC8vIGNsYXNzIEFsZ29Qb3RhdG8oQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2JhcmVfcm91dGluZ0AxMAogICAgcHVzaGJ5dGVzcyAweDI4YzViZWVhIDB4MDNlMjBiZWEgMHhhOWMyMjU4NiAweDJmMzkyNGQ3IDB4ODM1MWRhYjcgLy8gbWV0aG9kICJhc3NldF9vcHRfaW4oYXNzZXQsdHhuKXZvaWQiLCBtZXRob2QgImNyZWF0ZV9nYW1lKHR4bix0eG4pdm9pZCIsIG1ldGhvZCAicHJpbWVfZ2FtZV92cmYoKGFkZHJlc3MsdWludDY0KSx0eG4pdm9pZCIsIG1ldGhvZCAicGxheV9nYW1lKChhZGRyZXNzLHVpbnQ2NCkpc3RyaW5nIiwgbWV0aG9kICJjYW5jZWxfZ2FtZSgoYWRkcmVzcyx1aW50NjQpKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2Fzc2V0X29wdF9pbl9yb3V0ZUA1IG1haW5fY3JlYXRlX2dhbWVfcm91dGVANiBtYWluX3ByaW1lX2dhbWVfdnJmX3JvdXRlQDcgbWFpbl9wbGF5X2dhbWVfcm91dGVAOCBtYWluX2NhbmNlbF9nYW1lX3JvdXRlQDkKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMjoKICAgIC8vIGFsZ29wb3RhdG8ucHk6MjMKICAgIC8vIGNsYXNzIEFsZ29Qb3RhdG8oQVJDNENvbnRyYWN0KToKICAgIGludGNfMCAvLyAwCiAgICByZXR1cm4KCm1haW5fY2FuY2VsX2dhbWVfcm91dGVAOToKICAgIC8vIGFsZ29wb3RhdG8ucHk6NDU4CiAgICAvLyBAYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIGFsZ29wb3RhdG8ucHk6MjMKICAgIC8vIGNsYXNzIEFsZ29Qb3RhdG8oQVJDNENvbnRyYWN0KToKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIGFsZ29wb3RhdG8ucHk6NDU4CiAgICAvLyBAYWJpbWV0aG9kCiAgICBjYWxsc3ViIGNhbmNlbF9nYW1lCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3BsYXlfZ2FtZV9yb3V0ZUA4OgogICAgLy8gYWxnb3BvdGF0by5weTozOTcKICAgIC8vIEBhYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gYWxnb3BvdGF0by5weToyMwogICAgLy8gY2xhc3MgQWxnb1BvdGF0byhBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gYWxnb3BvdGF0by5weTozOTcKICAgIC8vIEBhYmltZXRob2QKICAgIGNhbGxzdWIgcGxheV9nYW1lCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgYnl0ZWMgNCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9wcmltZV9nYW1lX3ZyZl9yb3V0ZUA3OgogICAgLy8gYWxnb3BvdGF0by5weToyMzcKICAgIC8vIEBhYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gYWxnb3BvdGF0by5weToyMwogICAgLy8gY2xhc3MgQWxnb1BvdGF0byhBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICAvLyBhbGdvcG90YXRvLnB5OjIzNwogICAgLy8gQGFiaW1ldGhvZAogICAgY2FsbHN1YiBwcmltZV9nYW1lX3ZyZgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9jcmVhdGVfZ2FtZV9yb3V0ZUA2OgogICAgLy8gYWxnb3BvdGF0by5weToxNzAKICAgIC8vIEBhYmltZXRob2QKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gYWxnb3BvdGF0by5weToyMwogICAgLy8gY2xhc3MgQWxnb1BvdGF0byhBUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMyAvLyAyCiAgICAtCiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIC8vIGFsZ29wb3RhdG8ucHk6MTcwCiAgICAvLyBAYWJpbWV0aG9kCiAgICBjYWxsc3ViIGNyZWF0ZV9nYW1lCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2Fzc2V0X29wdF9pbl9yb3V0ZUA1OgogICAgLy8gYWxnb3BvdGF0by5weTo1MwogICAgLy8gQGFiaW1ldGhvZAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBhbGdvcG90YXRvLnB5OjIzCiAgICAvLyBjbGFzcyBBbGdvUG90YXRvKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBc3NldHMKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgLy8gYWxnb3BvdGF0by5weTo1MwogICAgLy8gQGFiaW1ldGhvZAogICAgY2FsbHN1YiBhc3NldF9vcHRfaW4KICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYmFyZV9yb3V0aW5nQDEwOgogICAgLy8gYWxnb3BvdGF0by5weToyMwogICAgLy8gY2xhc3MgQWxnb1BvdGF0byhBUkM0Q29udHJhY3QpOgogICAgdHhuIE9uQ29tcGxldGlvbgogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAxMgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgICEKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBhbGdvcG90YXRvLkFsZ29Qb3RhdG8uY29udHJhY3RfaXNfcmVjZWl2ZXIodHhuOiB1aW50NjQpIC0+IHZvaWQ6CmNvbnRyYWN0X2lzX3JlY2VpdmVyOgogICAgLy8gYWxnb3BvdGF0by5weTo0MC00NAogICAgLy8gQHN1YnJvdXRpbmUKICAgIC8vIGRlZiBjb250cmFjdF9pc19yZWNlaXZlcigKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIHR4bjogZ3R4bi5UcmFuc2FjdGlvbiwKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gYWxnb3BvdGF0by5weTo0OAogICAgLy8gaWYgdHhuLnR5cGUgPT0gVHJhbnNhY3Rpb25UeXBlLlBheW1lbnQ6CiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBkdXAKICAgIGludGNfMSAvLyBwYXkKICAgID09CiAgICBieiBjb250cmFjdF9pc19yZWNlaXZlcl9lbHNlX2JvZHlAMgogICAgLy8gYWxnb3BvdGF0by5weTo0OQogICAgLy8gYXNzZXJ0IHR4bi5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIGFzc2VydAoKY29udHJhY3RfaXNfcmVjZWl2ZXJfYWZ0ZXJfaWZfZWxzZUA1OgogICAgcmV0c3ViCgpjb250cmFjdF9pc19yZWNlaXZlcl9lbHNlX2JvZHlAMjoKICAgIC8vIGFsZ29wb3RhdG8ucHk6NTAKICAgIC8vIGVsaWYgdHhuLnR5cGUgPT0gVHJhbnNhY3Rpb25UeXBlLkFzc2V0VHJhbnNmZXI6CiAgICBmcmFtZV9kaWcgMAogICAgaW50Y18yIC8vIGF4ZmVyCiAgICA9PQogICAgYnogY29udHJhY3RfaXNfcmVjZWl2ZXJfYWZ0ZXJfaWZfZWxzZUA1CiAgICAvLyBhbGdvcG90YXRvLnB5OjUxCiAgICAvLyBhc3NlcnQgdHhuLmFzc2V0X3JlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQXNzZXRSZWNlaXZlcgogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIHJldHN1YgoKCi8vIGFsZ29wb3RhdG8uQWxnb1BvdGF0by5hc3NldF9vcHRfaW4oYXNzZXQ6IHVpbnQ2NCwgbWJyX3BheW1lbnQ6IHVpbnQ2NCkgLT4gdm9pZDoKYXNzZXRfb3B0X2luOgogICAgLy8gYWxnb3BvdGF0by5weTo1My01OAogICAgLy8gQGFiaW1ldGhvZAogICAgLy8gZGVmIGFzc2V0X29wdF9pbigKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIGFzc2V0OiBBc3NldCwKICAgIC8vICAgICBtYnJfcGF5bWVudDogZ3R4bi5UcmFuc2FjdGlvbgogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBhbGdvcG90YXRvLnB5OjY0CiAgICAvLyBzZWxmLmNvbnRyYWN0X2lzX3JlY2VpdmVyKG1icl9wYXltZW50KQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIGNvbnRyYWN0X2lzX3JlY2VpdmVyCiAgICAvLyBhbGdvcG90YXRvLnB5OjY2CiAgICAvLyBpZiBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLmlzX29wdGVkX2luKGFzc2V0KSA9PSBGYWxzZToKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBmcmFtZV9kaWcgLTIKICAgIGFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQogICAgYnVyeSAxCiAgICBibnogYXNzZXRfb3B0X2luX2Vsc2VfYm9keUAyCiAgICAvLyBhbGdvcG90YXRvLnB5OjY3CiAgICAvLyBhc3NlcnQgbWJyX3BheW1lbnQuYW1vdW50ID09IDEwMF8wMDAKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQW1vdW50CiAgICBwdXNoaW50IDEwMDAwMCAvLyAxMDAwMDAKICAgID09CiAgICBhc3NlcnQKICAgIC8vIGFsZ29wb3RhdG8ucHk6ODItODUKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0LAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIGFsZ29wb3RhdG8ucHk6ODQKICAgIC8vIGFzc2V0X3JlY2VpdmVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGZyYW1lX2RpZyAtMgogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIC8vIGFsZ29wb3RhdG8ucHk6ODIKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIGludGNfMiAvLyBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBhbGdvcG90YXRvLnB5OjgyLTg1CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldCwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1HbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgphc3NldF9vcHRfaW5fZWxzZV9ib2R5QDI6CiAgICAvLyBhbGdvcG90YXRvLnB5OjcxCiAgICAvLyBhc3NlcnQgbWJyX3BheW1lbnQuYW1vdW50ID09IDAKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgQW1vdW50CiAgICAhCiAgICBhc3NlcnQKICAgIHJldHN1YgoKCi8vIGFsZ29wb3RhdG8uQWxnb1BvdGF0by5jcmVhdGVfZ2FtZShhc3NldF9kZXBvc2l0OiB1aW50NjQsIG1icl9mZWU6IHVpbnQ2NCkgLT4gdm9pZDoKY3JlYXRlX2dhbWU6CiAgICAvLyBhbGdvcG90YXRvLnB5OjE3MC0xNzUKICAgIC8vIEBhYmltZXRob2QKICAgIC8vIGRlZiBjcmVhdGVfZ2FtZSgKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIGFzc2V0X2RlcG9zaXQ6IGd0eG4uVHJhbnNhY3Rpb24sCiAgICAvLyAgICAgbWJyX2ZlZTogZ3R4bi5UcmFuc2FjdGlvbgogICAgLy8gKSAtPiBOb25lOgogICAgcHJvdG8gMiAwCiAgICAvLyBhbGdvcG90YXRvLnB5OjE4NAogICAgLy8gc2VsZi5jb250cmFjdF9pc19yZWNlaXZlcihhc3NldF9kZXBvc2l0KQogICAgZnJhbWVfZGlnIC0yCiAgICBjYWxsc3ViIGNvbnRyYWN0X2lzX3JlY2VpdmVyCiAgICAvLyBhbGdvcG90YXRvLnB5OjE4NQogICAgLy8gc2VsZi5jb250cmFjdF9pc19yZWNlaXZlcihtYnJfZmVlKQogICAgZnJhbWVfZGlnIC0xCiAgICBjYWxsc3ViIGNvbnRyYWN0X2lzX3JlY2VpdmVyCiAgICAvLyBhbGdvcG90YXRvLnB5Ojk4CiAgICAvLyBhc3NldF9pZCA9IFVJbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIC8vIGFsZ29wb3RhdG8ucHk6OTkKICAgIC8vIGFtb3VudF9kZXBvc2l0ZWQgPSBVSW50NjQoMCkKICAgIGR1cAogICAgLy8gYWxnb3BvdGF0by5weToxMDEKICAgIC8vIGFzc2VydCBhc3NldF9kZXBvc2l0LnR5cGUgaW4gKFRyYW5zYWN0aW9uVHlwZS5QYXltZW50LCBUcmFuc2FjdGlvblR5cGUuQXNzZXRUcmFuc2ZlcikKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgVHlwZUVudW0KICAgIGR1cAogICAgaW50Y18xIC8vIHBheQogICAgPT0KICAgIGR1cAogICAgYm56IGNyZWF0ZV9nYW1lX2Jvb2xfdHJ1ZUAzCiAgICBmcmFtZV9kaWcgMgogICAgaW50Y18yIC8vIGF4ZmVyCiAgICA9PQogICAgYnogY3JlYXRlX2dhbWVfYm9vbF9mYWxzZUA0CgpjcmVhdGVfZ2FtZV9ib29sX3RydWVAMzoKICAgIGludGNfMSAvLyAxCgpjcmVhdGVfZ2FtZV9ib29sX21lcmdlQDU6CiAgICAvLyBhbGdvcG90YXRvLnB5OjEwMQogICAgLy8gYXNzZXJ0IGFzc2V0X2RlcG9zaXQudHlwZSBpbiAoVHJhbnNhY3Rpb25UeXBlLlBheW1lbnQsIFRyYW5zYWN0aW9uVHlwZS5Bc3NldFRyYW5zZmVyKQogICAgYXNzZXJ0CiAgICAvLyBhbGdvcG90YXRvLnB5OjEwMwogICAgLy8gaWYgYXNzZXRfZGVwb3NpdC50eXBlID09IFRyYW5zYWN0aW9uVHlwZS5QYXltZW50OgogICAgZnJhbWVfZGlnIDMKICAgIGJ6IGNyZWF0ZV9nYW1lX2Vsc2VfYm9keUA3CiAgICAvLyBhbGdvcG90YXRvLnB5OjEwNAogICAgLy8gYXNzZXRfaWQgPSBVSW50NjQoMCkKICAgIGludGNfMCAvLyAwCiAgICBmcmFtZV9idXJ5IDAKICAgIC8vIGFsZ29wb3RhdG8ucHk6MTA1CiAgICAvLyBhbW91bnRfZGVwb3NpdGVkID0gYXNzZXRfZGVwb3NpdC5hbW91bnQKICAgIGZyYW1lX2RpZyAtMgogICAgZ3R4bnMgQW1vdW50CiAgICBmcmFtZV9idXJ5IDEKCmNyZWF0ZV9nYW1lX2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyBhbGdvcG90YXRvLnB5OjExMQogICAgLy8gYXNzZXJ0IGFtb3VudF9kZXBvc2l0ZWQgIT0gMAogICAgZnJhbWVfZGlnIDEKICAgIGR1cAogICAgYXNzZXJ0CiAgICAvLyBhbGdvcG90YXRvLnB5OjEyMwogICAgLy8gdXNlcl9hZGRyID0gQWRkcmVzcyhUeG4uc2VuZGVyKQogICAgdHhuIFNlbmRlcgogICAgLy8gYWxnb3BvdGF0by5weToxMjQKICAgIC8vIGNvdW50ZXIgPSBhcmM0LlVJbnQ2NChzZWxmLmNvdW50ZXIpCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiY291bnRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jb3VudGVyIGV4aXN0cwogICAgaXRvYgogICAgLy8gYWxnb3BvdGF0by5weToxMjYtMTI5CiAgICAvLyByZXR1cm4gR2FtZUJveE5hbWUoCiAgICAvLyAgICAgcGxheWVyXzE9dXNlcl9hZGRyLAogICAgLy8gICAgIGNvdW50ZXI9Y291bnRlcgogICAgLy8gKQogICAgY29uY2F0CiAgICAvLyBhbGdvcG90YXRvLnB5OjE0MgogICAgLy8gdXNlcl9hZGRyID0gQWRkcmVzcyhUeG4uc2VuZGVyKQogICAgdHhuIFNlbmRlcgogICAgLy8gYWxnb3BvdGF0by5weToxNDYKICAgIC8vIHBsYXllcl8yPUFkZHJlc3MoR2xvYmFsLnplcm9fYWRkcmVzcyksCiAgICBnbG9iYWwgWmVyb0FkZHJlc3MKICAgIC8vIGFsZ29wb3RhdG8ucHk6MTQ3CiAgICAvLyBwbGF5ZXJfMV9yb3VuZD1hcmM0LlVJbnQ2NChHbG9iYWwucm91bmQpLAogICAgZ2xvYmFsIFJvdW5kCiAgICBpdG9iCiAgICAvLyBhbGdvcG90YXRvLnB5OjE1MAogICAgLy8gYXNzZXQ9YXJjNC5VSW50NjQoYXNzZXRfaWQpLAogICAgZnJhbWVfZGlnIDAKICAgIGl0b2IKICAgIC8vIGFsZ29wb3RhdG8ucHk6MTUxCiAgICAvLyBhc3NldF9hbW91bnQ9YXJjNC5VSW50NjQoYXNzZXRfYW1vdW50KQogICAgdW5jb3ZlciA1CiAgICBpdG9iCiAgICAvLyBhbGdvcG90YXRvLnB5OjE0NC0xNTIKICAgIC8vIHJldHVybiBHYW1lQm94VmFsdWUoCiAgICAvLyAgICAgICAgIHBsYXllcl8xPXVzZXJfYWRkciwKICAgIC8vICAgICAgICAgcGxheWVyXzI9QWRkcmVzcyhHbG9iYWwuemVyb19hZGRyZXNzKSwKICAgIC8vICAgICAgICAgcGxheWVyXzFfcm91bmQ9YXJjNC5VSW50NjQoR2xvYmFsLnJvdW5kKSwKICAgIC8vICAgICAgICAgcGxheWVyXzJfcm91bmQ9YXJjNC5VSW50NjQoMCksCiAgICAvLyAgICAgICAgIHZyZl9yb3VuZD1hcmM0LlVJbnQ2NCgwKSwKICAgIC8vICAgICAgICAgYXNzZXQ9YXJjNC5VSW50NjQoYXNzZXRfaWQpLAogICAgLy8gICAgICAgICBhc3NldF9hbW91bnQ9YXJjNC5VSW50NjQoYXNzZXRfYW1vdW50KQogICAgLy8gKQogICAgdW5jb3ZlciA0CiAgICB1bmNvdmVyIDQKICAgIGNvbmNhdAogICAgdW5jb3ZlciAzCiAgICBjb25jYXQKICAgIC8vIGFsZ29wb3RhdG8ucHk6MTQ4CiAgICAvLyBwbGF5ZXJfMl9yb3VuZD1hcmM0LlVJbnQ2NCgwKSwKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBhbGdvcG90YXRvLnB5OjE0NC0xNTIKICAgIC8vIHJldHVybiBHYW1lQm94VmFsdWUoCiAgICAvLyAgICAgICAgIHBsYXllcl8xPXVzZXJfYWRkciwKICAgIC8vICAgICAgICAgcGxheWVyXzI9QWRkcmVzcyhHbG9iYWwuemVyb19hZGRyZXNzKSwKICAgIC8vICAgICAgICAgcGxheWVyXzFfcm91bmQ9YXJjNC5VSW50NjQoR2xvYmFsLnJvdW5kKSwKICAgIC8vICAgICAgICAgcGxheWVyXzJfcm91bmQ9YXJjNC5VSW50NjQoMCksCiAgICAvLyAgICAgICAgIHZyZl9yb3VuZD1hcmM0LlVJbnQ2NCgwKSwKICAgIC8vICAgICAgICAgYXNzZXQ9YXJjNC5VSW50NjQoYXNzZXRfaWQpLAogICAgLy8gICAgICAgICBhc3NldF9hbW91bnQ9YXJjNC5VSW50NjQoYXNzZXRfYW1vdW50KQogICAgLy8gKQogICAgY29uY2F0CiAgICAvLyBhbGdvcG90YXRvLnB5OjE0OQogICAgLy8gdnJmX3JvdW5kPWFyYzQuVUludDY0KDApLAogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIGFsZ29wb3RhdG8ucHk6MTQ0LTE1MgogICAgLy8gcmV0dXJuIEdhbWVCb3hWYWx1ZSgKICAgIC8vICAgICAgICAgcGxheWVyXzE9dXNlcl9hZGRyLAogICAgLy8gICAgICAgICBwbGF5ZXJfMj1BZGRyZXNzKEdsb2JhbC56ZXJvX2FkZHJlc3MpLAogICAgLy8gICAgICAgICBwbGF5ZXJfMV9yb3VuZD1hcmM0LlVJbnQ2NChHbG9iYWwucm91bmQpLAogICAgLy8gICAgICAgICBwbGF5ZXJfMl9yb3VuZD1hcmM0LlVJbnQ2NCgwKSwKICAgIC8vICAgICAgICAgdnJmX3JvdW5kPWFyYzQuVUludDY0KDApLAogICAgLy8gICAgICAgICBhc3NldD1hcmM0LlVJbnQ2NChhc3NldF9pZCksCiAgICAvLyAgICAgICAgIGFzc2V0X2Ftb3VudD1hcmM0LlVJbnQ2NChhc3NldF9hbW91bnQpCiAgICAvLyApCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIC8vIGFsZ29wb3RhdG8ucHk6MTkzCiAgICAvLyBzZWxmLmdhbWVfYm94W2dhbWVfYm94X25hbWVdID0gZ2FtZV9ib3hfdmFsdWUuY29weSgpCiAgICBib3hfcHV0CiAgICByZXRzdWIKCmNyZWF0ZV9nYW1lX2Vsc2VfYm9keUA3OgogICAgLy8gYWxnb3BvdGF0by5weToxMDcKICAgIC8vIGVsaWYgYXNzZXRfZGVwb3NpdC50eXBlID09IFRyYW5zYWN0aW9uVHlwZS5Bc3NldFRyYW5zZmVyOgogICAgZnJhbWVfZGlnIDIKICAgIGludGNfMiAvLyBheGZlcgogICAgPT0KICAgIGJ6IGNyZWF0ZV9nYW1lX2FmdGVyX2lmX2Vsc2VAMTAKICAgIC8vIGFsZ29wb3RhdG8ucHk6MTA4CiAgICAvLyBhc3NldF9pZCA9IGFzc2V0X2RlcG9zaXQueGZlcl9hc3NldC5pZAogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBYZmVyQXNzZXQKICAgIGZyYW1lX2J1cnkgMAogICAgLy8gYWxnb3BvdGF0by5weToxMDkKICAgIC8vIGFtb3VudF9kZXBvc2l0ZWQgPSBhc3NldF9kZXBvc2l0LmFzc2V0X2Ftb3VudAogICAgZnJhbWVfZGlnIC0yCiAgICBndHhucyBBc3NldEFtb3VudAogICAgZnJhbWVfYnVyeSAxCiAgICBiIGNyZWF0ZV9nYW1lX2FmdGVyX2lmX2Vsc2VAMTAKCmNyZWF0ZV9nYW1lX2Jvb2xfZmFsc2VANDoKICAgIGludGNfMCAvLyAwCiAgICBiIGNyZWF0ZV9nYW1lX2Jvb2xfbWVyZ2VANQoKCi8vIGFsZ29wb3RhdG8uQWxnb1BvdGF0by5wcmltZV9nYW1lX3ZyZihnYW1lX2JveF9uYW1lOiBieXRlcywgYXNzZXRfZGVwb3NpdDogdWludDY0KSAtPiB2b2lkOgpwcmltZV9nYW1lX3ZyZjoKICAgIC8vIGFsZ29wb3RhdG8ucHk6MjM3LTI0MgogICAgLy8gQGFiaW1ldGhvZAogICAgLy8gZGVmIHByaW1lX2dhbWVfdnJmKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgZ2FtZV9ib3hfbmFtZTogR2FtZUJveE5hbWUsCiAgICAvLyAgICAgYXNzZXRfZGVwb3NpdDogZ3R4bi5UcmFuc2FjdGlvbiwKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDIgMAogICAgLy8gYWxnb3BvdGF0by5weToyNTEKICAgIC8vIHNlbGYuY29udHJhY3RfaXNfcmVjZWl2ZXIoYXNzZXRfZGVwb3NpdCkKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBjb250cmFjdF9pc19yZWNlaXZlcgogICAgLy8gYWxnb3BvdGF0by5weToyNTMKICAgIC8vIGdhbWVfYm94ID0gc2VsZi5nYW1lX2JveFtnYW1lX2JveF9uYW1lXS5jb3B5KCkKICAgIGZyYW1lX2RpZyAtMgogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZ2FtZV9ib3ggZW50cnkgZXhpc3RzCiAgICAvLyBhbGdvcG90YXRvLnB5OjIwOAogICAgLy8gYXNzZXJ0IGFzc2V0X2RlcG9zaXQudHlwZSBpbiAoVHJhbnNhY3Rpb25UeXBlLkFzc2V0VHJhbnNmZXIsIFRyYW5zYWN0aW9uVHlwZS5QYXltZW50KQogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBUeXBlRW51bQogICAgZHVwCiAgICBpbnRjXzIgLy8gYXhmZXIKICAgID09CiAgICBibnogcHJpbWVfZ2FtZV92cmZfYm9vbF90cnVlQDMKICAgIGZyYW1lX2RpZyAxCiAgICBpbnRjXzEgLy8gcGF5CiAgICA9PQogICAgYnogcHJpbWVfZ2FtZV92cmZfYm9vbF9mYWxzZUA0CgpwcmltZV9nYW1lX3ZyZl9ib29sX3RydWVAMzoKICAgIGludGNfMSAvLyAxCgpwcmltZV9nYW1lX3ZyZl9ib29sX21lcmdlQDU6CiAgICAvLyBhbGdvcG90YXRvLnB5OjIwOAogICAgLy8gYXNzZXJ0IGFzc2V0X2RlcG9zaXQudHlwZSBpbiAoVHJhbnNhY3Rpb25UeXBlLkFzc2V0VHJhbnNmZXIsIFRyYW5zYWN0aW9uVHlwZS5QYXltZW50KQogICAgYXNzZXJ0CiAgICAvLyBhbGdvcG90YXRvLnB5OjIxMAogICAgLy8gaWYgYXNzZXRfZGVwb3NpdC50eXBlID09IFRyYW5zYWN0aW9uVHlwZS5QYXltZW50OgogICAgZnJhbWVfZGlnIDEKICAgIGludGNfMSAvLyBwYXkKICAgID09CiAgICBieiBwcmltZV9nYW1lX3ZyZl9lbHNlX2JvZHlANwogICAgLy8gYWxnb3BvdGF0by5weToyMTEKICAgIC8vIGFzc2VydCBnYW1lX2JveF92YWx1ZS5hc3NldCA9PSAwCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICBleHRyYWN0IDg4IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBieXRlY18xIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgYj09CiAgICBhc3NlcnQKICAgIC8vIGFsZ29wb3RhdG8ucHk6MjEyCiAgICAvLyBhc3NlcnQgZ2FtZV9ib3hfdmFsdWUuYXNzZXRfYW1vdW50ID09IGFzc2V0X2RlcG9zaXQuYW1vdW50CiAgICBleHRyYWN0IDk2IDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgaXRvYgogICAgYj09CiAgICBhc3NlcnQKCnByaW1lX2dhbWVfdnJmX2FmdGVyX2lmX2Vsc2VAODoKICAgIC8vIGFsZ29wb3RhdG8ucHk6MjMwCiAgICAvLyBhc3NlcnQgZ2FtZV9ib3gucGxheWVyXzIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcwogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgZXh0cmFjdCAzMiAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgPT0KICAgIGFzc2VydAogICAgLy8gYWxnb3BvdGF0by5weToyMzEKICAgIC8vIGdhbWVfYm94LnBsYXllcl8yID0gQWRkcmVzcyhUeG4uc2VuZGVyKQogICAgdHhuIFNlbmRlcgogICAgcmVwbGFjZTIgMzIKICAgIC8vIGFsZ29wb3RhdG8ucHk6MjMyCiAgICAvLyBnYW1lX2JveC5wbGF5ZXJfMl9yb3VuZCA9IGFyYzQuVUludDY0KEdsb2JhbC5yb3VuZCkKICAgIGdsb2JhbCBSb3VuZAogICAgaXRvYgogICAgcmVwbGFjZTIgNzIKICAgIC8vIGFsZ29wb3RhdG8ucHk6MjMzCiAgICAvLyBnYW1lX2JveC52cmZfcm91bmQgPSBhcmM0LlVJbnQ2NChHbG9iYWwucm91bmQgKyA5KQogICAgZ2xvYmFsIFJvdW5kCiAgICBwdXNoaW50IDkgLy8gOQogICAgKwogICAgaXRvYgogICAgcmVwbGFjZTIgODAKICAgIC8vIGFsZ29wb3RhdG8ucHk6MjU4CiAgICAvLyBzZWxmLmdhbWVfYm94W2dhbWVfYm94X25hbWVdID0gZ2FtZV9ib3guY29weSgpCiAgICBmcmFtZV9kaWcgLTIKICAgIHN3YXAKICAgIGJveF9wdXQKICAgIHJldHN1YgoKcHJpbWVfZ2FtZV92cmZfZWxzZV9ib2R5QDc6CiAgICAvLyBhbGdvcG90YXRvLnB5OjIxNQogICAgLy8gYXNzZXJ0IGdhbWVfYm94X3ZhbHVlLmFzc2V0ID09IGFzc2V0X2RlcG9zaXQueGZlcl9hc3NldC5pZAogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgZXh0cmFjdCA4OCA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBYZmVyQXNzZXQKICAgIGl0b2IKICAgIGI9PQogICAgYXNzZXJ0CiAgICAvLyBhbGdvcG90YXRvLnB5OjIxNgogICAgLy8gYXNzZXJ0IGdhbWVfYm94X3ZhbHVlLmFzc2V0X2Ftb3VudCA9PSBhc3NldF9kZXBvc2l0LmFzc2V0X2Ftb3VudAogICAgZXh0cmFjdCA5NiA4IC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBc3NldEFtb3VudAogICAgaXRvYgogICAgYj09CiAgICBhc3NlcnQKICAgIGIgcHJpbWVfZ2FtZV92cmZfYWZ0ZXJfaWZfZWxzZUA4CgpwcmltZV9nYW1lX3ZyZl9ib29sX2ZhbHNlQDQ6CiAgICBpbnRjXzAgLy8gMAogICAgYiBwcmltZV9nYW1lX3ZyZl9ib29sX21lcmdlQDUKCgovLyBhbGdvcG90YXRvLkFsZ29Qb3RhdG8ucGxheV9nYW1lKGdhbWVfYm94X25hbWU6IGJ5dGVzKSAtPiBieXRlczoKcGxheV9nYW1lOgogICAgLy8gYWxnb3BvdGF0by5weTozOTctNDAxCiAgICAvLyBAYWJpbWV0aG9kCiAgICAvLyBkZWYgcGxheV9nYW1lKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgZ2FtZV9ib3hfbmFtZTogR2FtZUJveE5hbWUsCiAgICAvLyApIC0+IFN0cmluZzoKICAgIHByb3RvIDEgMQogICAgaW50Y18wIC8vIDAKICAgIGR1cG4gNgogICAgYnl0ZWNfMiAvLyAiIgogICAgZHVwbiA3CgpwbGF5X2dhbWVfd2hpbGVfdG9wQDI1OgogICAgcHVzaGludCAxMDAxMCAvLyAxMDAxMAogICAgZ2xvYmFsIE9wY29kZUJ1ZGdldAogICAgPgogICAgYnogcGxheV9nYW1lX2FmdGVyX3doaWxlQDMwCiAgICBpdHhuX2JlZ2luCiAgICBwdXNoaW50IDYgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgYnl0ZWMgNSAvLyAweDA2ODEwMQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW0KICAgIGJ5dGVjIDUgLy8gMHgwNjgxMDEKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGIgcGxheV9nYW1lX3doaWxlX3RvcEAyNQoKcGxheV9nYW1lX2FmdGVyX3doaWxlQDMwOgogICAgLy8gYWxnb3BvdGF0by5weTo0MjEKICAgIC8vIGdhbWVfYm94ID0gc2VsZi5nYW1lX2JveFtnYW1lX2JveF9uYW1lXS5jb3B5KCkKICAgIGZyYW1lX2RpZyAtMQogICAgYm94X2dldAogICAgc3dhcAogICAgZHVwCiAgICBjb3ZlciAyCiAgICBmcmFtZV9idXJ5IDAKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmdhbWVfYm94IGVudHJ5IGV4aXN0cwogICAgLy8gYWxnb3BvdGF0by5weTozOTUKICAgIC8vIGFzc2VydCBnYW1lX2JveC52cmZfcm91bmQgIT0gMAogICAgZHVwCiAgICBleHRyYWN0IDgwIDggLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICBkdXAKICAgIGZyYW1lX2J1cnkgNgogICAgYnl0ZWNfMSAvLyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIGIhPQogICAgYXNzZXJ0CiAgICAvLyBhbGdvcG90YXRvLnB5OjI3OAogICAgLy8gaWYgR2xvYmFsLnJvdW5kIC0gdnJmX3JvdW5kLm5hdGl2ZSA+IDE1MTI6CiAgICBnbG9iYWwgUm91bmQKICAgIHN3YXAKICAgIC8vIGFsZ29wb3RhdG8ucHk6Mjc2CiAgICAvLyB2cmZfcm91bmQgPSBnYW1lX2JveC52cmZfcm91bmQKICAgIHB1c2hpbnQgODAgLy8gODAKICAgIC8vIGFsZ29wb3RhdG8ucHk6Mjc4CiAgICAvLyBpZiBHbG9iYWwucm91bmQgLSB2cmZfcm91bmQubmF0aXZlID4gMTUxMjoKICAgIGV4dHJhY3RfdWludDY0CiAgICAtCiAgICBwdXNoaW50IDE1MTIgLy8gMTUxMgogICAgPgogICAgYnogcGxheV9nYW1lX2FmdGVyX2lmX2Vsc2VAMzYKICAgIC8vIGFsZ29wb3RhdG8ucHk6Mjc5CiAgICAvLyByZXR1cm4gVUludDY0KDApLCBGYWxzZQogICAgaW50Y18wIC8vIDAKICAgIGR1cAogICAgZnJhbWVfYnVyeSAxNAogICAgZnJhbWVfYnVyeSAxMQoKcGxheV9nYW1lX2FmdGVyX2lubGluZWRfYWxnb3BvdGF0by5BbGdvUG90YXRvLmdldF92cmZfb3V0cHV0X21vZHVsb0AzNzoKICAgIC8vIGFsZ29wb3RhdG8ucHk6MzU5CiAgICAvLyBwbGF5ZXJfMSA9IGdhbWVfYm94LnBsYXllcl8xLm5hdGl2ZQogICAgZnJhbWVfZGlnIDAKICAgIGR1cAogICAgZXh0cmFjdCAwIDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgZnJhbWVfYnVyeSAxCiAgICAvLyBhbGdvcG90YXRvLnB5OjM2MAogICAgLy8gcGxheWVyXzIgPSBnYW1lX2JveC5wbGF5ZXJfMi5uYXRpdmUKICAgIGR1cAogICAgZXh0cmFjdCAzMiAzMiAvLyBvbiBlcnJvcjogSW5kZXggYWNjZXNzIGlzIG91dCBvZiBib3VuZHMKICAgIGZyYW1lX2J1cnkgMgogICAgLy8gYWxnb3BvdGF0by5weTozNjIKICAgIC8vIGFzc2V0ID0gZ2FtZV9ib3guYXNzZXQubmF0aXZlCiAgICBkdXAKICAgIHB1c2hpbnQgODggLy8gODgKICAgIGV4dHJhY3RfdWludDY0CiAgICBkdXAKICAgIGNvdmVyIDIKICAgIGZyYW1lX2J1cnkgNwogICAgLy8gYWxnb3BvdGF0by5weTozNjMKICAgIC8vIGFzc2V0X2Ftb3VudCA9IGdhbWVfYm94LmFzc2V0X2Ftb3VudC5uYXRpdmUgKiAyCiAgICBwdXNoaW50IDk2IC8vIDk2CiAgICBleHRyYWN0X3VpbnQ2NAogICAgaW50Y18zIC8vIDIKICAgICoKICAgIGZyYW1lX2J1cnkgOAogICAgLy8gYWxnb3BvdGF0by5weTozNjUKICAgIC8vIGlmIGFzc2V0ID09IDA6CiAgICBibnogcGxheV9nYW1lX2Vsc2VfYm9keUA0MAogICAgLy8gYWxnb3BvdGF0by5weTozNjYKICAgIC8vIHJldHVybiBUcnVlLCBTdHJpbmcoJycpCiAgICBpbnRjXzEgLy8gMQogICAgYnl0ZWNfMiAvLyAiIgogICAgZnJhbWVfYnVyeSA1CiAgICBmcmFtZV9idXJ5IDkKCnBsYXlfZ2FtZV9hZnRlcl9pbmxpbmVkX2FsZ29wb3RhdG8uQWxnb1BvdGF0by52ZXJpZnlfYm90aF91c2Vyc19vcHRlZF9pbkA0NToKICAgIC8vIGFsZ29wb3RhdG8ucHk6NDI5CiAgICAvLyBpZiB2YWxpZF92cmZfcm91bmQgPT0gRmFsc2U6CiAgICBmcmFtZV9kaWcgMTQKICAgIGJueiBwbGF5X2dhbWVfZWxzZV9ib2R5QDIKICAgIC8vIGFsZ29wb3RhdG8ucHk6NDMwCiAgICAvLyBnYW1lX2JveC52cmZfcm91bmQgPSBhcmM0LlVJbnQ2NChHbG9iYWwucm91bmQgKyA5KQogICAgZ2xvYmFsIFJvdW5kCiAgICBwdXNoaW50IDkgLy8gOQogICAgKwogICAgaXRvYgogICAgZnJhbWVfZGlnIDAKICAgIHN3YXAKICAgIHJlcGxhY2UyIDgwCiAgICAvLyBhbGdvcG90YXRvLnB5OjQzMQogICAgLy8gc2VsZi5nYW1lX2JveFtnYW1lX2JveF9uYW1lXSA9IGdhbWVfYm94LmNvcHkoKQogICAgZnJhbWVfZGlnIC0xCiAgICBzd2FwCiAgICBib3hfcHV0CiAgICAvLyBhbGdvcG90YXRvLnB5OjQzMgogICAgLy8gcmV0dXJuIFN0cmluZygiVlJGIFJvdW5kIGV4cGlyZWQiKQogICAgcHVzaGJ5dGVzICJWUkYgUm91bmQgZXhwaXJlZCIKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpwbGF5X2dhbWVfZWxzZV9ib2R5QDI6CiAgICAvLyBhbGdvcG90YXRvLnB5OjQzNAogICAgLy8gZWxpZiBub3QgYm90aF91c2Vyc19vcHRlZF9pbnRvX2Fzc2V0OgogICAgZnJhbWVfZGlnIDkKICAgIGJueiBwbGF5X2dhbWVfZWxzZV9ib2R5QDQKICAgIC8vIGFsZ29wb3RhdG8ucHk6NDM2CiAgICAvLyBkZWwgc2VsZi5nYW1lX2JveFtnYW1lX2JveF9uYW1lXQogICAgZnJhbWVfZGlnIC0xCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIGFsZ29wb3RhdG8ucHk6NDM4CiAgICAvLyBzZWxmLmdhbWVzX3BsYXllZCArPSAxCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiZ2FtZXNfcGxheWVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmdhbWVzX3BsYXllZCBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBieXRlY18wIC8vICJnYW1lc19wbGF5ZWQiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gYWxnb3BvdGF0by5weTo0NDAKICAgIC8vIHJldHVybiByZXR1cm5fbWVzc2FnZQogICAgZnJhbWVfZGlnIDUKICAgIGZyYW1lX2J1cnkgMAogICAgcmV0c3ViCgpwbGF5X2dhbWVfZWxzZV9ib2R5QDQ6CiAgICAvLyBhbGdvcG90YXRvLnB5OjMxMQogICAgLy8gcG90YXRvX2hvbGRlciA9IEdsb2JhbC56ZXJvX2FkZHJlc3MKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgZnJhbWVfYnVyeSAzCiAgICAvLyBhbGdvcG90YXRvLnB5OjMxMwogICAgLy8gZm9yIGkgaW4gdXJhbmdlKG1vZHVsb18yNDBfdnJmX2J5dGVzX2FzX2ludCArIDEpOgogICAgZnJhbWVfZGlnIDExCiAgICBpbnRjXzEgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAxMgogICAgaW50Y18wIC8vIDAKICAgIGZyYW1lX2J1cnkgMTAKCnBsYXlfZ2FtZV9mb3JfaGVhZGVyQDg6CiAgICAvLyBhbGdvcG90YXRvLnB5OjMxMwogICAgLy8gZm9yIGkgaW4gdXJhbmdlKG1vZHVsb18yNDBfdnJmX2J5dGVzX2FzX2ludCArIDEpOgogICAgZnJhbWVfZGlnIDEwCiAgICBmcmFtZV9kaWcgMTIKICAgIDwKICAgIGZyYW1lX2RpZyAzCiAgICBmcmFtZV9idXJ5IDQKICAgIGJ6IHBsYXlfZ2FtZV9hZnRlcl9mb3JAMjIKICAgIC8vIGFsZ29wb3RhdG8ucHk6MzE0CiAgICAvLyBpZiBpICUgMiA9PSAwOgogICAgZnJhbWVfZGlnIDEwCiAgICBpbnRjXzMgLy8gMgogICAgJQogICAgZHVwCiAgICBmcmFtZV9idXJ5IDEzCiAgICBibnogcGxheV9nYW1lX2FmdGVyX2lmX2Vsc2VAMTEKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9idXJ5IDMKCnBsYXlfZ2FtZV9hZnRlcl9pZl9lbHNlQDExOgogICAgLy8gYWxnb3BvdGF0by5weTozMTcKICAgIC8vIGlmIGkgJSAyICE9IDA6CiAgICBmcmFtZV9kaWcgMTMKICAgIGJ6IHBsYXlfZ2FtZV9hZnRlcl9pZl9lbHNlQDEzCiAgICBmcmFtZV9kaWcgMgogICAgZnJhbWVfYnVyeSAzCgpwbGF5X2dhbWVfYWZ0ZXJfaWZfZWxzZUAxMzoKICAgIC8vIGFsZ29wb3RhdG8ucHk6MzIwCiAgICAvLyBpZiBpID09IG1vZHVsb18yNDBfdnJmX2J5dGVzX2FzX2ludDoKICAgIGZyYW1lX2RpZyAxMAogICAgZnJhbWVfZGlnIDExCiAgICA9PQogICAgYnogcGxheV9nYW1lX2FmdGVyX2lmX2Vsc2VAMTgKICAgIC8vIGFsZ29wb3RhdG8ucHk6MzIxCiAgICAvLyBpZiBhc3NldF9pZCA9PSAwOgogICAgZnJhbWVfZGlnIDcKICAgIGJueiBwbGF5X2dhbWVfZWxzZV9ib2R5QDE2CiAgICAvLyBhbGdvcG90YXRvLnB5OjMyMi0zMjUKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICByZWNlaXZlcj1wb3RhdG9faG9sZGVyLAogICAgLy8gICAgIGFtb3VudD1hc3NldF9hbW91bnQsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICBmcmFtZV9kaWcgOAogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIGZyYW1lX2RpZyAzCiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICAvLyBhbGdvcG90YXRvLnB5OjMyMgogICAgLy8gaXR4bi5QYXltZW50KAogICAgaW50Y18xIC8vIHBheQogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBhbGdvcG90YXRvLnB5OjMyMi0zMjUKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICByZWNlaXZlcj1wb3RhdG9faG9sZGVyLAogICAgLy8gICAgIGFtb3VudD1hc3NldF9hbW91bnQsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAoKcGxheV9nYW1lX2FmdGVyX2lmX2Vsc2VAMTc6CiAgICBmcmFtZV9kaWcgMwogICAgZnJhbWVfYnVyeSA0CgpwbGF5X2dhbWVfYWZ0ZXJfZm9yQDIyOgogICAgZnJhbWVfZGlnIDQKICAgIC8vIGFsZ29wb3RhdG8ucHk6NDQ3CiAgICAvLyBkZWwgc2VsZi5nYW1lX2JveFtnYW1lX2JveF9uYW1lXQogICAgZnJhbWVfZGlnIC0xCiAgICBib3hfZGVsCiAgICBwb3AKICAgIC8vIGFsZ29wb3RhdG8ucHk6NDQ5CiAgICAvLyBzZWxmLmdhbWVzX3BsYXllZCArPSAxCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAiZ2FtZXNfcGxheWVkIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmdhbWVzX3BsYXllZCBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBieXRlY18wIC8vICJnYW1lc19wbGF5ZWQiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gYWxnb3BvdGF0by5weTo0NTEKICAgIC8vIGlmIHBvdGF0b19ob2xkZXIgPT0gcGxheWVyXzE6CiAgICBmcmFtZV9kaWcgMQogICAgPT0KICAgIGJ6IHBsYXlfZ2FtZV9lbHNlX2JvZHlANgogICAgLy8gYWxnb3BvdGF0by5weTo0NTIKICAgIC8vIHJldHVybiBTdHJpbmcoIlBsYXllciAxIFdpbnMhIikKICAgIHB1c2hieXRlcyAiUGxheWVyIDEgV2lucyEiCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKcGxheV9nYW1lX2Vsc2VfYm9keUA2OgogICAgLy8gYWxnb3BvdGF0by5weTo0NTQKICAgIC8vIHJldHVybiBTdHJpbmcoIlBsYXllciAyIFdpbnMhIikKICAgIHB1c2hieXRlcyAiUGxheWVyIDIgV2lucyEiCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKcGxheV9nYW1lX2Vsc2VfYm9keUAxNjoKICAgIC8vIGFsZ29wb3RhdG8ucHk6MzI3LTMzMQogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNzZXRfaWQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9cG90YXRvX2hvbGRlciwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9YXNzZXRfYW1vdW50LAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgZnJhbWVfZGlnIDgKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGZyYW1lX2RpZyAzCiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGZyYW1lX2RpZyA3CiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gYWxnb3BvdGF0by5weTozMjcKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIGludGNfMiAvLyBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBhbGdvcG90YXRvLnB5OjMyNy0zMzEKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0X2lkLAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPXBvdGF0b19ob2xkZXIsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PWFzc2V0X2Ftb3VudCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICBiIHBsYXlfZ2FtZV9hZnRlcl9pZl9lbHNlQDE3CgpwbGF5X2dhbWVfYWZ0ZXJfaWZfZWxzZUAxODoKICAgIC8vIGFsZ29wb3RhdG8ucHk6MzM0CiAgICAvLyBpZiBhc3NldF9pZCA9PSAwOgogICAgZnJhbWVfZGlnIDcKICAgIGJueiBwbGF5X2dhbWVfZWxzZV9ib2R5QDIwCiAgICAvLyBhbGdvcG90YXRvLnB5OjMzNS0zMzgKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIC8vICAgICByZWNlaXZlcj1wb3RhdG9faG9sZGVyLAogICAgLy8gICAgIGFtb3VudD0wLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gYWxnb3BvdGF0by5weTozMzcKICAgIC8vIGFtb3VudD0wLAogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBmcmFtZV9kaWcgMwogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgLy8gYWxnb3BvdGF0by5weTozMzUKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIGludGNfMSAvLyBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gYWxnb3BvdGF0by5weTozMzUtMzM4CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9cG90YXRvX2hvbGRlciwKICAgIC8vICAgICBhbW91bnQ9MCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CgpwbGF5X2dhbWVfYWZ0ZXJfaWZfZWxzZUAyMToKICAgIC8vIGFsZ29wb3RhdG8ucHk6MzEzCiAgICAvLyBmb3IgaSBpbiB1cmFuZ2UobW9kdWxvXzI0MF92cmZfYnl0ZXNfYXNfaW50ICsgMSk6CiAgICBmcmFtZV9kaWcgMTAKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDEwCiAgICBiIHBsYXlfZ2FtZV9mb3JfaGVhZGVyQDgKCnBsYXlfZ2FtZV9lbHNlX2JvZHlAMjA6CiAgICAvLyBhbGdvcG90YXRvLnB5OjM0MC0zNDQKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0X2lkLAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPXBvdGF0b19ob2xkZXIsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PTAsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBhbGdvcG90YXRvLnB5OjM0MwogICAgLy8gYXNzZXRfYW1vdW50PTAsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgZnJhbWVfZGlnIDMKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgZnJhbWVfZGlnIDcKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBhbGdvcG90YXRvLnB5OjM0MAogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgaW50Y18yIC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIGFsZ29wb3RhdG8ucHk6MzQwLTM0NAogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNzZXRfaWQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9cG90YXRvX2hvbGRlciwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9MCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICBiIHBsYXlfZ2FtZV9hZnRlcl9pZl9lbHNlQDIxCgpwbGF5X2dhbWVfZWxzZV9ib2R5QDQwOgogICAgLy8gYWxnb3BvdGF0by5weTozNjgKICAgIC8vIGVsaWYgcGxheWVyXzEuaXNfb3B0ZWRfaW4oQXNzZXQoYXNzZXQpKSA9PSBGYWxzZToKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9kaWcgNwogICAgYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCiAgICBidXJ5IDEKICAgIGJueiBwbGF5X2dhbWVfZWxzZV9ib2R5QDQyCiAgICAvLyBhbGdvcG90YXRvLnB5OjM2OS0zNzMKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0LAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPXBsYXllcl8yLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1hc3NldF9hbW91bnQKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIGZyYW1lX2RpZyA4CiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBmcmFtZV9kaWcgMgogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICBmcmFtZV9kaWcgNwogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIC8vIGFsZ29wb3RhdG8ucHk6MzY5CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICBpbnRjXzIgLy8gYXhmZXIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gYWxnb3BvdGF0by5weTozNjktMzczCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldCwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1wbGF5ZXJfMiwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9YXNzZXRfYW1vdW50CiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gYWxnb3BvdGF0by5weTozNzUKICAgIC8vIHJldHVybiBGYWxzZSwgU3RyaW5nKCJQbGF5ZXIgMSBGb3JmZWl0IGJ5IG9wdGluZyBvdXQiKQogICAgaW50Y18wIC8vIDAKICAgIHB1c2hieXRlcyAiUGxheWVyIDEgRm9yZmVpdCBieSBvcHRpbmcgb3V0IgogICAgZnJhbWVfYnVyeSA1CiAgICBmcmFtZV9idXJ5IDkKICAgIC8vIGFsZ29wb3RhdG8ucHk6NDI3CiAgICAvLyBib3RoX3VzZXJzX29wdGVkX2ludG9fYXNzZXQsIHJldHVybl9tZXNzYWdlID0gc2VsZi52ZXJpZnlfYm90aF91c2Vyc19vcHRlZF9pbihnYW1lX2JveC5jb3B5KCkpCiAgICBiIHBsYXlfZ2FtZV9hZnRlcl9pbmxpbmVkX2FsZ29wb3RhdG8uQWxnb1BvdGF0by52ZXJpZnlfYm90aF91c2Vyc19vcHRlZF9pbkA0NQoKcGxheV9nYW1lX2Vsc2VfYm9keUA0MjoKICAgIC8vIGFsZ29wb3RhdG8ucHk6Mzc3CiAgICAvLyBlbGlmIHBsYXllcl8yLmlzX29wdGVkX2luKEFzc2V0KGFzc2V0KSkgPT0gRmFsc2U6CiAgICBmcmFtZV9kaWcgMgogICAgZnJhbWVfZGlnIDcKICAgIGFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQogICAgYnVyeSAxCiAgICBibnogcGxheV9nYW1lX2Vsc2VfYm9keUA0NAogICAgLy8gYWxnb3BvdGF0by5weTozNzgtMzgyCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldCwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1wbGF5ZXJfMSwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9YXNzZXRfYW1vdW50CiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICBmcmFtZV9kaWcgOAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgZnJhbWVfZGlnIDEKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgZnJhbWVfZGlnIDcKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBhbGdvcG90YXRvLnB5OjM3OAogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgaW50Y18yIC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIGFsZ29wb3RhdG8ucHk6Mzc4LTM4MgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIHhmZXJfYXNzZXQ9YXNzZXQsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9cGxheWVyXzEsCiAgICAvLyAgICAgYXNzZXRfYW1vdW50PWFzc2V0X2Ftb3VudAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKICAgIC8vIGFsZ29wb3RhdG8ucHk6Mzg0CiAgICAvLyByZXR1cm4gRmFsc2UsIFN0cmluZygiUGxheWVyIDIgRm9yZmVpdCBieSBvcHRpbmcgb3V0IikKICAgIGludGNfMCAvLyAwCiAgICBwdXNoYnl0ZXMgIlBsYXllciAyIEZvcmZlaXQgYnkgb3B0aW5nIG91dCIKICAgIGZyYW1lX2J1cnkgNQogICAgZnJhbWVfYnVyeSA5CiAgICAvLyBhbGdvcG90YXRvLnB5OjQyNwogICAgLy8gYm90aF91c2Vyc19vcHRlZF9pbnRvX2Fzc2V0LCByZXR1cm5fbWVzc2FnZSA9IHNlbGYudmVyaWZ5X2JvdGhfdXNlcnNfb3B0ZWRfaW4oZ2FtZV9ib3guY29weSgpKQogICAgYiBwbGF5X2dhbWVfYWZ0ZXJfaW5saW5lZF9hbGdvcG90YXRvLkFsZ29Qb3RhdG8udmVyaWZ5X2JvdGhfdXNlcnNfb3B0ZWRfaW5ANDUKCnBsYXlfZ2FtZV9lbHNlX2JvZHlANDQ6CiAgICAvLyBhbGdvcG90YXRvLnB5OjM4NwogICAgLy8gcmV0dXJuIFRydWUsIFN0cmluZygnJykKICAgIGludGNfMSAvLyAxCiAgICBieXRlY18yIC8vICIiCiAgICBmcmFtZV9idXJ5IDUKICAgIGZyYW1lX2J1cnkgOQogICAgLy8gYWxnb3BvdGF0by5weTo0MjcKICAgIC8vIGJvdGhfdXNlcnNfb3B0ZWRfaW50b19hc3NldCwgcmV0dXJuX21lc3NhZ2UgPSBzZWxmLnZlcmlmeV9ib3RoX3VzZXJzX29wdGVkX2luKGdhbWVfYm94LmNvcHkoKSkKICAgIGIgcGxheV9nYW1lX2FmdGVyX2lubGluZWRfYWxnb3BvdGF0by5BbGdvUG90YXRvLnZlcmlmeV9ib3RoX3VzZXJzX29wdGVkX2luQDQ1CgpwbGF5X2dhbWVfYWZ0ZXJfaWZfZWxzZUAzNjoKICAgIC8vIGFsZ29wb3RhdG8ucHk6MjgzLTI4OAogICAgLy8gcmVzdWx0LCB0eG4gPSBhYmlfY2FsbFtCeXRlc10oCiAgICAvLyAgICAgJ211c3RfZ2V0KHVpbnQ2NCxieXRlW10pYnl0ZVtdJywKICAgIC8vICAgICB2cmZfcm91bmQsCiAgICAvLyAgICAgZ2FtZV9ib3hfYXNfYnl0ZXMsCiAgICAvLyAgICAgYXBwX2lkPTYwMDAxMTg4NywKICAgIC8vICkKICAgIGl0eG5fYmVnaW4KICAgIC8vIGFsZ29wb3RhdG8ucHk6Mjg2CiAgICAvLyBnYW1lX2JveF9hc19ieXRlcywKICAgIGZyYW1lX2RpZyAwCiAgICBkdXAKICAgIGxlbgogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgLy8gYWxnb3BvdGF0by5weToyODcKICAgIC8vIGFwcF9pZD02MDAwMTE4ODcsCiAgICBpbnRjIDQgLy8gNjAwMDExODg3CiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIGFsZ29wb3RhdG8ucHk6MjgzLTI4OAogICAgLy8gcmVzdWx0LCB0eG4gPSBhYmlfY2FsbFtCeXRlc10oCiAgICAvLyAgICAgJ211c3RfZ2V0KHVpbnQ2NCxieXRlW10pYnl0ZVtdJywKICAgIC8vICAgICB2cmZfcm91bmQsCiAgICAvLyAgICAgZ2FtZV9ib3hfYXNfYnl0ZXMsCiAgICAvLyAgICAgYXBwX2lkPTYwMDAxMTg4NywKICAgIC8vICkKICAgIHB1c2hieXRlcyAweDQ3YzIwYzIzIC8vIG1ldGhvZCAibXVzdF9nZXQodWludDY0LGJ5dGVbXSlieXRlW10iCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgZnJhbWVfZGlnIDYKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgcHVzaGludCA2IC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgaXR4bl9zdWJtaXQKICAgIGl0eG4gTGFzdExvZwogICAgZHVwCiAgICBleHRyYWN0IDAgNAogICAgYnl0ZWMgNCAvLyAweDE1MWY3Yzc1CiAgICA9PQogICAgYXNzZXJ0IC8vIEFSQzQgcHJlZml4IGlzIHZhbGlkCiAgICBleHRyYWN0IDYgMAogICAgLy8gYWxnb3BvdGF0by5weToyOTEKICAgIC8vIG1vZHVsb18yNDBfdnJmX2J5dGVzX2FzX2ludCA9IG9wLmJ0b2koKHZyZl9ieXRlc19hc19pbnRlZ2VyLm5hdGl2ZSAlIDI0MCkuYnl0ZXMpCiAgICBwdXNoYnl0ZXMgMHhmMAogICAgYiUKICAgIGJ0b2kKICAgIGZyYW1lX2J1cnkgMTEKICAgIC8vIGFsZ29wb3RhdG8ucHk6MjkzCiAgICAvLyByZXR1cm4gbW9kdWxvXzI0MF92cmZfYnl0ZXNfYXNfaW50LCBUcnVlCiAgICBpbnRjXzEgLy8gMQogICAgZnJhbWVfYnVyeSAxNAogICAgLy8gYWxnb3BvdGF0by5weTo0MjUKICAgIC8vIG1vZHVsb18yNDBfdnJmX2J5dGVzX2FzX2ludCwgdmFsaWRfdnJmX3JvdW5kID0gc2VsZi5nZXRfdnJmX291dHB1dF9tb2R1bG8oZ2FtZV9ib3guY29weSgpKQogICAgYiBwbGF5X2dhbWVfYWZ0ZXJfaW5saW5lZF9hbGdvcG90YXRvLkFsZ29Qb3RhdG8uZ2V0X3ZyZl9vdXRwdXRfbW9kdWxvQDM3CgoKLy8gYWxnb3BvdGF0by5BbGdvUG90YXRvLmNhbmNlbF9nYW1lKGdhbWVfYm94X25hbWU6IGJ5dGVzKSAtPiB2b2lkOgpjYW5jZWxfZ2FtZToKICAgIC8vIGFsZ29wb3RhdG8ucHk6NDU4LTQ2MgogICAgLy8gQGFiaW1ldGhvZAogICAgLy8gZGVmIGNhbmNlbF9nYW1lKAogICAgLy8gICAgIHNlbGYsCiAgICAvLyAgICAgZ2FtZV9ib3hfbmFtZTogR2FtZUJveE5hbWUKICAgIC8vICkgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gYWxnb3BvdGF0by5weTo0NjcKICAgIC8vIGdhbWVfYm94ID0gc2VsZi5nYW1lX2JveFtnYW1lX2JveF9uYW1lXS5jb3B5KCkKICAgIGZyYW1lX2RpZyAtMQogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZ2FtZV9ib3ggZW50cnkgZXhpc3RzCiAgICAvLyBhbGdvcG90YXRvLnB5OjQ2OQogICAgLy8gcGxheWVyXzEgPSBnYW1lX2JveC5wbGF5ZXJfMS5uYXRpdmUKICAgIGR1cAogICAgZXh0cmFjdCAwIDMyIC8vIG9uIGVycm9yOiBJbmRleCBhY2Nlc3MgaXMgb3V0IG9mIGJvdW5kcwogICAgc3dhcAogICAgLy8gYWxnb3BvdGF0by5weTo0NzAKICAgIC8vIHBsYXllcl8yID0gZ2FtZV9ib3gucGxheWVyXzIubmF0aXZlCiAgICBkdXAKICAgIGV4dHJhY3QgMzIgMzIgLy8gb24gZXJyb3I6IEluZGV4IGFjY2VzcyBpcyBvdXQgb2YgYm91bmRzCiAgICAvLyBhbGdvcG90YXRvLnB5OjQ3MwogICAgLy8gYXNzZXQgPSBnYW1lX2JveC5hc3NldC5uYXRpdmUKICAgIGRpZyAxCiAgICBwdXNoaW50IDg4IC8vIDg4CiAgICBleHRyYWN0X3VpbnQ2NAogICAgZHVwCiAgICBjb3ZlciAzCiAgICBjb3ZlciA0CiAgICAvLyBhbGdvcG90YXRvLnB5OjQ3NAogICAgLy8gYXNzZXRfYW1vdW50ID0gZ2FtZV9ib3guYXNzZXRfYW1vdW50Lm5hdGl2ZQogICAgc3dhcAogICAgcHVzaGludCA5NiAvLyA5NgogICAgZXh0cmFjdF91aW50NjQKICAgIGNvdmVyIDMKICAgIC8vIGFsZ29wb3RhdG8ucHk6NDc2CiAgICAvLyBhc3NlcnQgcGxheWVyXzIgPT0gR2xvYmFsLnplcm9fYWRkcmVzcwogICAgZ2xvYmFsIFplcm9BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBhbGdvcG90YXRvLnB5OjQ3OAogICAgLy8gaWYgYXNzZXQgPT0gMDoKICAgIGJueiBjYW5jZWxfZ2FtZV9lbHNlX2JvZHlAMwogICAgLy8gYWxnb3BvdGF0by5weTo0NzktNDgyCiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9cGxheWVyXzEsCiAgICAvLyAgICAgYW1vdW50PWFzc2V0X2Ftb3VudAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIC8vIGFsZ29wb3RhdG8ucHk6NDc5CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICBpbnRjXzEgLy8gcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIGFsZ29wb3RhdG8ucHk6NDc5LTQ4MgogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHJlY2VpdmVyPXBsYXllcl8xLAogICAgLy8gICAgIGFtb3VudD1hc3NldF9hbW91bnQKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CgpjYW5jZWxfZ2FtZV9hZnRlcl9pZl9lbHNlQDU6CiAgICAvLyBhbGdvcG90YXRvLnB5OjQ5MQogICAgLy8gZGVsIHNlbGYuZ2FtZV9ib3hbZ2FtZV9ib3hfbmFtZV0KICAgIGZyYW1lX2RpZyAtMQogICAgYm94X2RlbAogICAgcG9wCiAgICByZXRzdWIKCmNhbmNlbF9nYW1lX2Vsc2VfYm9keUAzOgogICAgLy8gYWxnb3BvdGF0by5weTo0ODUtNDg5CiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9cGxheWVyXzEsCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldCwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9YXNzZXRfYW1vdW50CiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICBzd2FwCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBmcmFtZV9kaWcgMAogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgLy8gYWxnb3BvdGF0by5weTo0ODUKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIGludGNfMiAvLyBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBhbGdvcG90YXRvLnB5OjQ4NS00ODkKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1wbGF5ZXJfMSwKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0LAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1hc3NldF9hbW91bnQKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICBiIGNhbmNlbF9nYW1lX2FmdGVyX2lmX2Vsc2VANQo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 3
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "counter": {
                    "type": "uint64",
                    "key": "counter"
                },
                "games_played": {
                    "type": "uint64",
                    "key": "games_played"
                },
                "vrf_app_id": {
                    "type": "uint64",
                    "key": "vrf_app_id"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AlgoPotato",
        "methods": [
            {
                "name": "asset_opt_in",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "txn",
                        "name": "mbr_payment"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Confirm the minimum balance requirement for the asset opt in of 100,000 Microalgo, or 0.1 Algo, was sent to the contract\n(Prevents potential usage of Algo funds reserves for games or excess mbr from box deletions)"
            },
            {
                "name": "create_game",
                "args": [
                    {
                        "type": "txn",
                        "name": "asset_deposit"
                    },
                    {
                        "type": "txn",
                        "name": "mbr_fee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Initializes a game\n- Dynamically confirms the contract is the receiver of both the asset deposit and mbr fee - Gets the asset id and amount transferred from the asset deposit - Constructs a box name instance using the sender and current global counter - Constructs a box value template with only non-default values being player 1 address, asset (0 if algo), asset deposit amount, and player 1 round (current round) - Writes the box name and value"
            },
            {
                "name": "prime_game_vrf",
                "args": [
                    {
                        "type": "(address,uint64)",
                        "name": "game_box_name"
                    },
                    {
                        "type": "txn",
                        "name": "asset_deposit"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Asserts the contract is the receiver of player 2's asset deposit\nGets the current game details Verifies that the asset deposit matches the game details, Updates the current game box with player 2's information Writes the updated information into box storage"
            },
            {
                "name": "play_game",
                "args": [
                    {
                        "type": "(address,uint64)",
                        "name": "game_box_name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "string"
                },
                "desc": "Initializes the \"Hot Potato\" Game\n- Starts with an ensure budget requiring 14 inner txns - Gets the game information - Ensures a player 2 has joined and the game is ready - Gets the VRF Output % 240, see \"get_vrf_output_modulo\" for information on why the # 240 was chosen - Verifies both users are opted in or asset is Algorand which does not require opt in - If either of the users are not opted into the asset then the reward goes to the user that is still opted in - If both users are not opted in the first to opt in can claim the reward - If the VRF round has expired (1,512 rounds have passed since the VRF round selected) a new VRF round is created 9 rounds into the future - Hot Potato game starts, the contract sends Algo or Asset zero amount transactions to both players until the target modulo is reached - The player the 'Hot Potato' was on at the target modulo receives the reward - The reward is dispensed and the box is deleted to prevent state bloat - A little string is returned that states which player won"
            },
            {
                "name": "cancel_game",
                "args": [
                    {
                        "type": "(address,uint64)",
                        "name": "game_box_name"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Cancels a game if and only if there is no active player 2\nDispenses the asset deposit to player 1"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}